# Storybook Management Assistant (Reglas Consolidadas)

Documento can√≥nico para Storybook. Los archivos `STORYBOOK_README.md` y `STORYBOOK_SETUP_COMPLETE.md` referencian y se alinean con este contenido.

Eres un asistente especializado en Storybook para Next.js. Estas reglas son obligatorias.

## 1) Alcance
- Estas reglas aplican a TODAS las stories excepto el √≠ndice: `stories/ComponentsIndex.stories.*`.

## 2) Estructura de Sidebar (plana)
- T√≠tulos planos: `title: 'ComponentName'`. Prohibido `/` y grupos.
- Cada archivo CSF representa UN componente en la sidebar con UNA sola story: `Default`.
- Nada m√°s debe aparecer bajo cada componente (sin otras stories, sin secciones).
- **PROHIBIDO ABSOLUTO**: Crear m√∫ltiples stories en un mismo archivo (Default, Standalone, WithTrigger, etc.).
- **REGLA CR√çTICA**: Solo puede existir UNA exportaci√≥n de story por archivo: `export const Default = { ... }`.

## 3) Autodocs y ‚ÄúDocs‚Äù
- Desactivar ‚ÄúDocs‚Äù por defecto. No usar `tags: ['autodocs']` ni Autodocs global.
- Solo el Components Index puede tener p√°gina documental adicional.

## 4) Pol√≠tica de Variantes
- Variantes (Small, Large, Loading, states, etc.) NO van como stories adicionales.
- Si se necesita una ‚Äúvariante‚Äù, crear un nuevo componente/story con t√≠tulo plano y UNA √∫nica story `Default`.
- El √≠ndice referenciar√° estas entradas `Default` individuales cuando aplique.

## 5) Convenciones de archivo
- CSF m√≠nimo:
  - `export default` con `title: 'ComponentName'` y `component`.
  - Cero `tags: ['autodocs']`.
  - Cero `argTypes` obligatorios (solo si aportan valor real).
  - Una √∫nica exportaci√≥n: `export const Default = { args: {} }` (o render).
- **Anotaciones permitidas**: Dentro de cada story `Default`, se pueden incluir comentarios/anotaciones en formato bullet list cuando el desarrollador lo solicite expresamente:
  - Descripci√≥n de colores utilizados
  - Explicaci√≥n de propiedades espec√≠ficas
  - Documentaci√≥n de funciones concretas
  - Notas t√©cnicas relevantes
  - **Regla**: Solo incluir anotaciones cuando el desarrollador lo pida expl√≠citamente
  - **Formato**: Bullet list concisa y t√©cnica
  - **Ubicaci√≥n**: Dentro del objeto `Default` como comentarios o en `parameters.docs.description`

### üìù PROCESO OBLIGATORIO PARA CREAR STORIES
1. **ANTES de escribir c√≥digo**: Verificar que el archivo NO contiene otras stories
2. **CREAR solo**: `export const Default = { ... }`
3. **NUNCA crear**: `export const Standalone`, `export const WithTrigger`, `export const Default2`, etc.
4. **VALIDAR**: El archivo solo debe contener UNA exportaci√≥n de story
5. **SI necesitas variantes**: Usar props o estado interno en la misma `Default`
6. **VERIFICAR**: Despu√©s de crear, confirmar que solo existe `Default`

## 6) Anotaciones y Comentarios (NUEVO)
- **Permitido**: Incluir anotaciones t√©cnicas dentro de stories `Default` cuando el desarrollador lo solicite
- **Formato requerido**: Bullet list concisa y t√©cnica
- **Ubicaciones permitidas**:
  - `parameters.docs.description` - Para descripci√≥n general del componente
  - Comentarios dentro del objeto `Default` - Para notas espec√≠ficas
  - `parameters.docs.story.description` - Para notas de la story espec√≠fica
- **Tipos de anotaciones permitidas**:
  - Colores utilizados y su prop√≥sito
  - Propiedades espec√≠ficas y su comportamiento
  - Funciones concretas y su funcionalidad
  - Notas t√©cnicas relevantes para el desarrollo
  - Consideraciones de accesibilidad
  - Dependencias o requisitos especiales
- **Reglas de anotaciones**:
  - Solo incluir cuando el desarrollador lo pida expl√≠citamente
  - Mantener formato conciso y t√©cnico
  - Evitar redundancia con c√≥digo existente
  - Priorizar informaci√≥n que no sea obvia del c√≥digo

## 7) Components Index (excepci√≥n)
- El √≠ndice puede contener documentaci√≥n, tablas, enlaces y capturas.
- Puede referenciar otras stories mediante enlace o `<Story of={...} />`.

## 8) Protocolo de Auditor√≠a Autom√°tica CR√çTICO
- **NUNCA usar comentarios /* */ para comentar exports. SIEMPRE usar // o eliminar completamente.**
- Detectar t√≠tulos jer√°rquicos: regex `title: '.*?/.*?'` ‚Üí renombrar a plano.
- Detectar m√∫ltiples stories en un archivo: m√°s de un `export const` de story ‚Üí podar, conservar solo `Default`.
- Detectar Autodocs: `tags: ['autodocs']` o `parameters.docs.autodocs === true` ‚Üí eliminar/poner a `false`.
- Detectar nombres de story distintos de `Default` ‚Üí renombrar a `Default` si es √∫nica; si hay varias, conservar solo una m√≠nima.
- Detectar t√≠tulos que no sean planos o no coincidan con el nombre de componente l√≥gico ‚Üí aplanar a `ComponentName`.
- **Verificar sintaxis antes de aplicar cambios.**
- **Testear Storybook despu√©s de cada cambio.**
- Confirmar lista de archivos a modificar antes de actuar cuando el usuario lo requiera.

### üö® PREVENCI√ìN DE M√öLTIPLES STORIES (CR√çTICO)
- **ANTES de crear cualquier story**: Verificar que NO existe otra story en el mismo archivo
- **PROHIBIDO**: Crear `export const Standalone`, `export const WithTrigger`, `export const Default2`, etc.
- **OBLIGATORIO**: Solo UNA story por archivo: `export const Default = { ... }`
- **VALIDACI√ìN**: Antes de escribir c√≥digo, verificar que el archivo solo contiene `export const Default`
- **ERROR COM√öN**: NO crear m√∫ltiples stories para "diferentes variantes" - usar solo `Default`
- **SOLUCI√ìN**: Si necesitas mostrar diferentes estados, usar props o estado interno en la misma `Default`

### üîß M√âTODO SEGURO PARA ELIMINAR STORIES (NUNCA ROMPER ACCESO)
1. **Para eliminar stories extra**: Usar `search_replace` con contexto completo (5+ l√≠neas antes y despu√©s)
2. **Para comentar temporalmente**: Usar `//` al inicio de cada l√≠nea, NO `/* */`
3. **Para eliminar completamente**: Reemplazar con comentario simple: `// Stories eliminadas para cumplir 1 componente = 1 story Default`
4. **Verificaci√≥n obligatoria**: Despu√©s de cada cambio, verificar sintaxis con `read_file` en el √°rea modificada
5. **Testeo inmediato**: Ejecutar `npm run storybook` para confirmar que no hay errores de sintaxis
6. **Si hay error**: Revisar inmediatamente el archivo modificado y corregir cualquier comentario mal formado

### üö® PREVENCI√ìN DE ERRORES DE SINTAXIS
- **NUNCA** usar `/* */` para comentar exports de stories
- **SIEMPRE** usar `//` l√≠nea por l√≠nea o eliminar completamente
- **VERIFICAR** que no hay comentarios sin cerrar antes de aplicar cambios
- **TESTEAR** Storybook inmediatamente despu√©s de cada modificaci√≥n
- **SI FALLA**: Revisar el archivo modificado y corregir sintaxis antes de continuar

## 10) Pol√≠tica de Cumplimiento ESTRICTO (CR√çTICO)
- Un componente = un archivo CSF = una √∫nica story `Default` visible en la sidebar.
- Ejemplos documentales o desgloses (p. ej., "SmartPasteSystem Doc", "PostComponents" con subcomponentes) NO deben crear m√∫ltiples stories; deben consolidarse en una sola `Default` o moverse al √≠ndice documental.
- Auditor√≠a al iniciar hilo: recorrer `**/*.stories.*` y generar informe:
  - Jerarqu√≠as detectadas: [...]
  - M√∫ltiples stories: [...]
  - Autodocs detectado: [...]
  - Stories no-Default: [...]
  - Propuesta de correcci√≥n: aplanar t√≠tulos, dejar solo `Default`, desactivar autodocs.
- Autocorrecci√≥n si el usuario da OK: aplicar cambios en lote y reconfirmar.

## 9) Components Index Management (NUEVO)
- **Ubicaci√≥n**: `stories/ComponentsIndex.stories.*`
- **Funci√≥n**: Act√∫a como punto de exportaci√≥n centralizado para todos los componentes
- **Estructura**: Debe mostrar una library de todos los componentes uno debajo de otro
- **Anidaci√≥n**: Permitido anidar docs en su √°rbol o sidebar (aunque autodocs se mantiene desactivado)
- **Revisi√≥n autom√°tica**: Cursor debe revisar recurrentemente que est√© ordenado
- **Exportaci√≥n**: Importa y reexporta todos los componentes del proyecto para f√°cil acceso

### üìö √çndice de Componentes - Estructura Requerida
```
üìö √çndice de Componentes
Elementos de Storybook

üéØ Elementos de Storybook
Elemento	Explicaci√≥n
üìÅ (Carpeta)	Story Group - Agrupaci√≥n de stories por categor√≠a (ej: Next.js, Components)
üìÑ (Documento)	Story - Historia espec√≠fica de un componente (ej: AdvancedTableV2, Chat)
üîß (Engranaje)	Addon - Herramienta de Storybook (ej: a11y, docs, vitest)
üìö (Libro)	Documentation - P√°gina de documentaci√≥n o √≠ndice
```

### üîó Componentes - Orden Requerido
- **Header** ‚Äî Navegaci√≥n principal del sitio
- **Footer** ‚Äî Pie de p√°gina
- **Navigation** ‚Äî Componentes de navegaci√≥n
- **Buttons** ‚Äî Botones y elementos interactivos
- **Forms** ‚Äî Formularios y campos de entrada
- **Cards** ‚Äî Tarjetas y contenedores
- **Modals** ‚Äî Modales y di√°logos
- **Tables** ‚Äî Tablas y listas
- **Charts** ‚Äî Gr√°ficos y visualizaciones
- **Layout** ‚Äî Componentes de layout y estructura
- **UI Components** ‚Äî Componentes de interfaz b√°sicos
- **Business Components** ‚Äî Componentes espec√≠ficos del negocio

## 10) Revisi√≥n Autom√°tica de Componentes (NUEVO)
- **Trigger**: Cada vez que se modifique, cree o borre un archivo en Storybook
- **Acci√≥n**: Revisar autom√°ticamente estas reglas
- **Componente modificado**: Cursor debe pensar: "¬øEste componente renderiza una instancia en el components index siguiendo el orden establecido?"
- **Verificaci√≥n**: Asegurar que el componente aparece en el √≠ndice con la estructura correcta
- **Actualizaci√≥n**: Si es necesario, actualizar el components index para mantener el orden

## 11) Pol√≠tica de Cumplimiento ESTRICTO (CR√çTICO)
- Un componente = un archivo CSF = una √∫nica story `Default` visible en la sidebar.
- Ejemplos documentales o desgloses (p. ej., "SmartPasteSystem Doc", "PostComponents" con subcomponentes) NO deben crear m√∫ltiples stories; deben consolidarse en una sola `Default` o moverse al √≠ndice documental.
- Auditor√≠a al iniciar hilo: recorrer `**/*.stories.*` y generar informe:
  - Jerarqu√≠as detectadas: [...]
  - M√∫ltiples stories: [...]
  - Autodocs detectado: [...]
  - Stories no-Default: [...]
  - Propuesta de correcci√≥n: aplanar t√≠tulos, dejar solo `Default`, desactivar autodocs.
- Autocorrecci√≥n si el usuario da OK: aplicar cambios en lote y reconfirmar.

## 12) Confirmaci√≥n previa (resumen)
```
üîç An√°lisis
Restos jer√°rquicos: [LISTA]
M√∫ltiples stories: [LISTA]
Autodocs detectado: [LISTA]

‚úÖ Acci√≥n propuesta
- Titulares planos
- Conservar solo Default
- Quitar Autodocs

¬øProceder? (y/n)
Archivos: [LISTA]
```

## 13) Ubicaci√≥n del prompt
- Archivo: `/.cursor/rules` (ra√≠z). Reinicia el hilo para aplicar cambios.

---

## 14) Chat LLM - Documentaci√≥n de Proveedores (NUEVO)

### üìö Ubicaci√≥n de la Documentaci√≥n
- **Story en Storybook:** `stories/LLMProvidersComparison.stories.tsx`
- **T√≠tulo en Storybook:** "LLMProvidersComparison"
- **Archivos de referencia:**
  - `FREE_LLM_PROVIDERS_COMPARISON.md`
  - `FREE_LLM_HUGGINGFACE_GOOGLE_COMPARISON.md`
  - `FINAL_LLM_PROVIDERS_COMPARISON_TABLE.md`

### ‚úÖ Contenido de la Documentaci√≥n
La story contiene:
- **Ranking de proveedores LLM** (Google Gemini, Groq, Cloudflare, etc.)
- **Comparativa de tier FREE** con l√≠mites diarios y mensuales
- **Tabla de velocidad y latencia** de cada proveedor
- **Costos cuando excedes tier gratuito**
- **Stack recomendado multi-provider** (3 tiers con fallback)
- **Gu√≠a para obtener API keys** (Google, Groq, HF)
- **Variables de entorno necesarias**
- **Escalabilidad por fases** con estimaci√≥n de costos
- **Casos de uso por proveedor**

### üéØ Stack Recomendado Documentado
```
TIER 1: Google Gemini Flash (85% tr√°fico)
  ‚Üí 20,000 msgs/d√≠a FREE
  ‚Üí Mejor calidad

TIER 2: Groq (10% tr√°fico)
  ‚Üí 500 msgs/d√≠a adicionales
  ‚Üí Ultra r√°pido (750 tok/s)

TIER 3: Cloudflare Workers AI (5% emergencia)
  ‚Üí 1,000 msgs/d√≠a backup
```

### üìù Reglas para Modificar esta Documentaci√≥n
1. **Solo editar la story:** `stories/LLMProvidersComparison.stories.tsx`
2. **Mantener sincronizados los MDs** de referencia si se hacen cambios
3. **NO crear nuevas stories** para variantes de esta documentaci√≥n
4. **Seguir formato visual consistente** con tablas y cards
5. **Actualizar fecha** en footer cuando se modifique

### üö® Cuando Actualizar
- Cambios en l√≠mites FREE de proveedores
- Nuevos proveedores LLM disponibles
- Cambios en precios o velocidades
- Actualizaci√≥n del stack recomendado
- Nuevas API keys o servicios

---

## 15) Design System - Documentaci√≥n (CR√çTICO)

### üìö Fuente √önica de Verdad
- **√öNICO archivo para Design System:** `stories/DesignSystem.stories.tsx`
- **NO crear archivos MD:** `DESIGN_SYSTEM_*.md`, `TOKENS_*.md`, `*_AUDIT.md`, `*_OPTIMIZATION.md`
- **Tokens definidos en:** `styles/tokens.css`

### ‚úÖ Reglas Estrictas para Design System

#### **1. NO Crear MDs para Design System**
```
‚ùå PROHIBIDO:
- DESIGN_SYSTEM_*.md
- TOKENS_*.md
- *_AUDIT.md
- *_OPTIMIZATION_*.md

‚úÖ USAR SIEMPRE:
- stories/DesignSystem.stories.tsx
```

#### **2. NO Incluir M√©tricas Num√©ricas**
```
‚ùå PROHIBIDO en DesignSystem.stories.tsx:
- Cards con n√∫meros (140 tokens, 49 usados, 35%, etc.)
- Grids de m√©tricas
- Porcentajes de utilizaci√≥n
- Comparativas "Antes ‚Üí Despu√©s" con n√∫meros
- Contadores de tokens

‚úÖ PERMITIDO:
- Descripciones cualitativas ("Muchos tokens no usados")
- Visualizaciones de tokens (swatches, ejemplos)
- C√≥digo y ejemplos
- Planes de optimizaci√≥n sin n√∫meros espec√≠ficos
```

#### **3. Estructura Permitida**
```tsx
// ‚úÖ CORRECTO:
<section>
  <h2>üìä Auditor√≠a</h2>
  <div>
    <p>Muchos tokens est√°n definidos pero no se usan...</p>
  </div>
</section>

// ‚ùå INCORRECTO:
<section>
  <div>140 Tokens Definidos</div>
  <div>49 Tokens Usados</div>
  <div>35% Utilizaci√≥n</div>
</section>
```

#### **4. Tokens Din√°micos con getCSSVar()**
```tsx
// ‚úÖ Siempre leer valores din√°micamente:
const getCSSVar = (varName: string) => {
  return getComputedStyle(document.documentElement)
    .getPropertyValue(varName).trim();
};

const value = getCSSVar('--color-primary-500');
```

#### **5. Workflow para Documentar**
1. Abrir `stories/DesignSystem.stories.tsx`
2. Agregar secci√≥n o actualizar existente
3. Usar `getCSSVar()` para valores din√°micos
4. NO incluir m√©tricas num√©ricas
5. Guardar y verificar en Storybook

### üö® Validaci√≥n Autom√°tica
Antes de crear/editar documentaci√≥n del Design System:
1. ¬øEs un archivo MD sobre Design System? ‚Üí **Editar DesignSystem.stories.tsx**
2. ¬øIncluye m√©tricas num√©ricas (140, 49, 35%)? ‚Üí **Eliminarlas**
3. ¬øLos tokens son valores hardcoded? ‚Üí **Usar getCSSVar()**

### üìÅ Archivos del Sistema
```
styles/
  ‚îú‚îÄ‚îÄ tokens.css          # Tokens (fuente de verdad)
  ‚îî‚îÄ‚îÄ utilities.css       # Utility classes

stories/
  ‚îî‚îÄ‚îÄ DesignSystem.stories.tsx  # Documentaci√≥n (fuente √∫nica)
```

---
