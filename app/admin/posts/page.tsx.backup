"use client"

import { useEffect, useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Plus, Edit, Trash2, User, Calendar, Eye, X, Table, Type, Code, Minus, Bold, Italic } from "lucide-react"
import type { Post } from "@/lib/posts-db"

export default function AdminPostsPage() {
  const [posts, setPosts] = useState<Post[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [stats, setStats] = useState({
    total: 0,
    published: 0,
    drafts: 0,
    scheduled: 0,
    total_views: 0
  })

  // Estados para el modal de edici√≥n
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [editingPost, setEditingPost] = useState<Post | null>(null)
  const [editTitle, setEditTitle] = useState("")
  const [editExcerpt, setEditExcerpt] = useState("")
  const [editContent, setEditContent] = useState("")
  const [editFeaturedImage, setEditFeaturedImage] = useState("")
  const [isSaving, setIsSaving] = useState(false)
  const [saveMessage, setSaveMessage] = useState("")
  const contentRef = useRef<HTMLDivElement>(null)

  // Estados para el modal de creaci√≥n
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [newTitle, setNewTitle] = useState("")
  const [newExcerpt, setNewExcerpt] = useState("")
  const [newContent, setNewContent] = useState("")
  const [newFeaturedImage, setNewFeaturedImage] = useState("")
  const [isCreating, setIsCreating] = useState(false)
  const [createMessage, setCreateMessage] = useState("")
  const newContentRef = useRef<HTMLDivElement>(null)

  // Cargar posts al montar el componente
  useEffect(() => {
    loadPosts()
  }, [])

  const loadPosts = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/posts')
      if (!response.ok) {
        throw new Error('Error al cargar los posts')
      }
      const data = await response.json()
      
      // Clean uninstall: Limpiar contenido de tablas de base de datos en todos los posts
      const cleanedPosts = data?.map((post: Post) => ({
        ...post,
        content: post.content || ""
      })) || []
      
      setPosts(cleanedPosts)
      
      // Calcular estad√≠sticas
      const total = cleanedPosts.length || 0
      const published = cleanedPosts.filter((p: Post) => p.status === 'published').length || 0
      const drafts = cleanedPosts.filter((p: Post) => p.status === 'draft').length || 0
      const scheduled = cleanedPosts.filter((p: Post) => p.status === 'scheduled').length || 0
      const total_views = cleanedPosts.reduce((sum: number, p: Post) => sum + (p.views || 0), 0) || 0
      
      setStats({ total, published, drafts, scheduled, total_views })
    } catch (err: any) {
      setError(err.message || 'Error al cargar los posts')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id: number) => {
    if (!confirm('¬øEst√°s seguro de que quieres eliminar este post?')) {
      return
    }

    try {
      const response = await fetch(`/api/posts/${id}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        throw new Error('Error al eliminar el post')
      }

      await loadPosts()
    } catch (err: any) {
      setError(err.message || 'Error al eliminar el post')
    }
  }

  const handleEdit = (post: Post) => {
    setEditingPost(post)
    setEditTitle(post.title || "")
    setEditExcerpt(post.excerpt || "")
    // Clean uninstall: Limpiar contenido de tablas de base de datos al editar
          const cleanedContent = post.content || ""
    setEditContent(cleanedContent)
    setEditFeaturedImage(post.featured_image || "")
    setIsEditModalOpen(true)
    
    // Limpieza adicional en tiempo real despu√©s de abrir el modal
    setTimeout(() => {
      if (contentRef.current) {
        const currentContent = contentRef.current.innerHTML
        const reCleanedContent = currentContent
        if (currentContent !== reCleanedContent) {
          contentRef.current.innerHTML = reCleanedContent
          console.log('üßπ Limpieza adicional aplicada en tiempo real')
        }
      }
      
      // üö´ LIMPIEZA AGRESIVA ESPEC√çFICA para elementos que mencionaste
      if (contentRef.current) {
        let aggressiveCleaned = contentRef.current.innerHTML
        
        // Eliminar espec√≠ficamente el icono de archivo que mencionaste
        aggressiveCleaned = aggressiveCleaned.replace(
          /<div[^>]*class="[^"]*w-6 h-6 bg-blue-100 rounded flex items-center justify-center[^"]*"[^>]*>.*?<svg[^>]*class="[^"]*lucide lucide-file-text[^"]*"[^>]*>.*?<\/svg>.*?<\/div>/g,
          ''
        )
        
        // Eliminar cualquier elemento con iconos de base de datos
        aggressiveCleaned = aggressiveCleaned.replace(
          /<div[^>]*>.*?<svg[^>]*class="[^"]*lucide lucide-[^"]*"[^>]*>.*?<\/svg>.*?<\/div>/g,
          ''
        )
        
        if (aggressiveCleaned !== contentRef.current.innerHTML) {
          contentRef.current.innerHTML = aggressiveCleaned
          console.log('üßπüßπ LIMPIEZA AGRESIVA aplicada para elementos espec√≠ficos de BD')
        }
      }
    }, 100)
  }

  const handleSaveEdit = async () => {
    if (!editingPost) return

    setIsSaving(true)
    try {
      // Extraer el contenido HTML del editor WYSIWYG
      let contentToSave = ""
      
      if (contentRef.current) {
        contentToSave = contentRef.current.innerHTML
        // ‚úÖ NO limpiar contenido - preservar tablas tal como est√°n (heredado del proyecto anterior)
      }

      const response = await fetch(`/api/posts/${editingPost.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: editTitle,
          excerpt: editExcerpt,
          content: contentToSave,
          featured_image: editFeaturedImage,
        }),
      })

      if (!response.ok) {
        throw new Error('Error al actualizar el post')
      }

      await loadPosts()
      setSaveMessage("Post actualizado correctamente")
      setTimeout(() => setSaveMessage(""), 3000)
      
      setIsEditModalOpen(false)
      setEditingPost(null)
      setEditTitle("")
      setEditExcerpt("")
      setEditContent("")
    } catch (err: any) {
      setError(err.message || 'Error al actualizar el post')
    } finally {
      setIsSaving(false)
    }
  }

  const handleCloseModal = () => {
    setIsEditModalOpen(false)
    setEditingPost(null)
    setEditTitle("")
    setEditExcerpt("")
    setEditContent("")
    setEditFeaturedImage("")
  }

  // Funciones para crear nuevo post
  const handleCreateNewPost = () => {
    setIsCreateModalOpen(true)
    setNewTitle("")
    setNewExcerpt("")
    setNewContent("")
    setNewFeaturedImage("")
    setCreateMessage("")
  }

  const handleSaveNewPost = async () => {
    if (!newTitle.trim()) {
      setCreateMessage("El t√≠tulo es obligatorio")
      return
    }

    setIsCreating(true)
    try {
      // Extraer el contenido HTML del editor WYSIWYG
      let contentToSave = ""
      
      if (newContentRef.current) {
        contentToSave = newContentRef.current.innerHTML
        // ‚úÖ NO limpiar contenido - preservar tablas tal como est√°n (heredado del proyecto anterior)
      }

      // Generar slug autom√°ticamente
      const slug = newTitle
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '')

      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: newTitle,
          slug: slug,
          excerpt: newExcerpt,
          content: contentToSave,
          featured_image: newFeaturedImage,
          published: true,
          status: 'published',
          author: 'Mario Verd√∫',
        }),
      })

      if (!response.ok) {
        throw new Error('Error al crear el post')
      }

      await loadPosts()
      setCreateMessage("Post creado correctamente")
      setTimeout(() => setCreateMessage(""), 3000)
      
      setIsCreateModalOpen(false)
      setNewTitle("")
      setNewExcerpt("")
      setNewContent("")
      setNewFeaturedImage("")
    } catch (err: any) {
      setCreateMessage(err.message || 'Error al crear el post')
    } finally {
      setIsCreating(false)
    }
  }

  const handleCloseCreateModal = () => {
    setIsCreateModalOpen(false)
    setNewTitle("")
    setNewExcerpt("")
    setNewContent("")
    setNewFeaturedImage("")
    setCreateMessage("")
  }

  // Funciones para el editor WYSIWYG
  
  // ‚úÖ IMPLEMENTACI√ìN ROBUSTA HEREDADA DEL PROYECTO ANTERIOR
  // NO hay funci√≥n de limpieza - las tablas se preservan tal como est√°n
  // Esto garantiza que las tablas del editor WYSIWYG funcionen perfectamente
  // como funcionaban en el proyecto anterior (1.27)
  
  // Funci√≥n simple que NO modifica el contenido (heredada del proyecto anterior)
  const cleanDatabaseTables = (content: string): string => {
    // ‚úÖ NO HACER NADA - preservar el contenido tal como est√°
    // Esto es exactamente como funcionaba en el proyecto anterior
    return content
  }
    
    // 2. üö´ ELIMINAR RESTOS SUELTOS de tablas de base de datos (elementos individuales)
    // Estos son elementos que NO est√°n dentro de contenedores pero son claramente de BD
    
    // 2.1 Eliminar elementos de estado/prioridad sueltos
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*flex items-center space-x-2[^"]*"[^>]*>\s*<span[^>]*>Estado<\/span>.*?<\/div>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*flex items-center space-x-2[^"]*"[^>]*>\s*<span[^>]*>Prioridad<\/span>.*?<\/div>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*flex items-center space-x-2[^"]*"[^>]*>\s*<span[^>]*>Asignado<\/span>.*?<\/div>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*flex items-center space-x-2[^"]*"[^>]*>\s*<span[^>]*>Fecha l√≠mite<\/span>.*?<\/div>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*flex items-center space-x-2[^"]*"[^>]*>\s*<span[^>]*>Etiquetas<\/span>.*?<\/div>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*flex items-center space-x-2[^"]*"[^>]*>\s*<span[^>]*>Progreso<\/span>.*?<\/div>/g,
      ''
    )
    
    // 2.2 Eliminar elementos de UI de base de datos sueltos
    cleanedContent = cleanedContent.replace(
      /<span[^>]*class="[^"]*inline-flex items-center px-2\.5 py-0\.5 rounded-full text-xs font-medium bg-blue-100 text-blue-800[^"]*"[^>]*>En progreso<\/span>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<span[^>]*class="[^"]*inline-flex items-center px-2\.5 py-0\.5 rounded-full text-xs font-medium bg-red-100 text-red-800[^"]*"[^>]*>Alta<\/span>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<span[^>]*class="[^"]*text-gray-700[^"]*"[^>]*>Sin asignar<\/span>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<span[^>]*class="[^"]*text-gray-700[^"]*"[^>]*>Sin fecha<\/span>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<span[^>]*class="[^"]*text-gray-400 text-sm[^"]*"[^>]*>Sin etiquetas<\/span>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<span[^>]*class="[^"]*text-sm text-gray-600[^"]*"[^>]*>0%<\/span>/g,
      ''
    )
    
    // 2.3 Eliminar elementos de iconos y controles de BD sueltos
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*flex items-center space-x-1 opacity-0 group-hover:opacity-100 transition-opacity[^"]*"[^>]*>.*?<\/div>/g,
      ''
    )
    
    // 2.4 üö´ ELIMINAR ELEMENTOS ESPEC√çFICOS de base de datos que aparecen en posts
    // Iconos de archivo, documentos, etc.
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*w-6 h-6 bg-blue-100 rounded[^"]*"[^>]*>.*?<\/div>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*w-6 h-6 bg-gray-200 rounded-full[^"]*"[^>]*>.*?<\/div>/g,
      ''
    )
    
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*w-4 h-4 border border-gray-300 rounded[^"]*"[^>]*>.*?<\/div>/g,
      ''
    )
    
    // 2.5 üö´ ELIMINAR CUALQUIER ELEMENTO que contenga palabras clave de BD
    const databaseKeywords = [
      'Estado', 'Prioridad', 'Asignado', 'Fecha l√≠mite', 'Etiquetas', 'Progreso',
      'En progreso', 'Alta', 'Sin asignar', 'Sin fecha', 'Sin etiquetas', '0%',
      'Nuevo Proyecto', 'Proyecto', 'Tarea', 'Actividad'
    ]
    
    databaseKeywords.forEach(keyword => {
      // Buscar y eliminar divs que contengan estas palabras clave
      const regex = new RegExp(`<div[^>]*>.*?${keyword}.*?<\/div>`, 'g')
      cleanedContent = cleanedContent.replace(regex, '')
      
      // Tambi√©n eliminar spans que contengan estas palabras
      const spanRegex = new RegExp(`<span[^>]*>.*?${keyword}.*?<\/span>`, 'g')
      cleanedContent = cleanedContent.replace(spanRegex, '')
    })
    
    // 2.6 üö´ ELIMINAR ELEMENTOS CON CLASES ESPEC√çFICAS de BD
    const databaseClasses = [
      'bg-blue-100', 'bg-red-100', 'bg-gray-200', 'bg-gray-100',
      'text-blue-800', 'text-red-800', 'text-gray-600', 'text-gray-700'
    ]
    
    databaseClasses.forEach(className => {
      // Eliminar divs con estas clases espec√≠ficas
      const classRegex = new RegExp(`<div[^>]*class="[^"]*${className}[^"]*"[^>]*>.*?<\/div>`, 'g')
      cleanedContent = cleanedContent.replace(classRegex, '')
      
      // Eliminar spans con estas clases espec√≠ficas
      const spanClassRegex = new RegExp(`<span[^>]*class="[^"]*${className}[^"]*"[^>]*>.*?<\/span>`, 'g')
      cleanedContent = cleanedContent.replace(spanClassRegex, '')
    })
    
    // 2.7 üö´ ELIMINAR ELEMENTOS ESPEC√çFICOS que aparecen en posts existentes
    // Iconos de archivo, documentos, etc. que mencionaste espec√≠ficamente
    cleanedContent = cleanedContent.replace(
      /<div[^>]*class="[^"]*w-6 h-6 bg-blue-100 rounded flex items-center justify-center[^"]*"[^>]*>.*?<svg[^>]*class="[^"]*lucide lucide-file-text[^"]*"[^>]*>.*?<\/svg>.*?<\/div>/g,
      ''
    )
    
    // üö´ SOLO eliminar iconos si NO est√°n dentro de tablas del editor WYSIWYG
    // Esto previene que se eliminen las tablas que s√≠ queremos mantener
    
    // Solo eliminar iconos de archivo si NO est√°n dentro de tablas del editor
    cleanedContent = cleanedContent.replace(
      /<div[^>]*>.*?<svg[^>]*class="[^"]*lucide lucide-file-text[^"]*"[^>]*>.*?<\/svg>.*?<\/div>(?![^<]*table-container)/g,
      ''
    )
    
    // Solo eliminar iconos de usuario si NO est√°n dentro de tablas del editor
    cleanedContent = cleanedContent.replace(
      /<div[^>]*>.*?<svg[^>]*class="[^"]*lucide lucide-user[^"]*"[^>]*>.*?<\/svg>.*?<\/div>(?![^<]*table-container)/g,
      ''
    )
    
    // Solo eliminar iconos de calendario si NO est√°n dentro de tablas del editor
    cleanedContent = cleanedContent.replace(
      /<div[^>]*>.*?<svg[^>]*class="[^"]*lucide lucide-calendar[^"]*"[^>]*>.*?<\/svg>.*?<\/div>(?![^<]*table-container)/g,
      ''
    )
    
    // Solo eliminar iconos de etiquetas si NO est√°n dentro de tablas del editor
    cleanedContent = cleanedContent.replace(
      /<div[^>]*>.*?<svg[^>]*class="[^"]*lucide lucide-tag[^"]*"[^>]*>.*?<\/svg>.*?<\/div>(?![^<]*table-container)/g,
      ''
    )
    
    // 2.8 üö´ LIMPIEZA INTELIGENTE: Solo eliminar elementos que NO est√©n en tablas del editor
    // Buscar patrones espec√≠ficos que aparecen en posts existentes
    // PERO NO eliminar elementos dentro de tablas del editor WYSIWYG
    const intelligentPatterns = [
      // Solo elementos con flex que NO est√©n dentro de tablas del editor
      /<div[^>]*class="[^"]*flex items-center space-x-2[^"]*"[^>]*>.*?<svg[^>]*>.*?<\/svg>.*?<\/div>(?![^<]*table-container)/g,
      /<div[^>]*class="[^"]*flex items-center justify-center[^"]*"[^>]*>.*?<svg[^>]*>.*?<\/svg>.*?<\/div>(?![^<]*table-container)/g,
      /<div[^>]*class="[^"]*flex items-center gap-[^"]*"[^"]*"[^>]*>.*?<svg[^>]*>.*?<\/svg>.*?<\/div>(?![^<]*table-container)/g
    ]
    
    intelligentPatterns.forEach(pattern => {
      cleanedContent = cleanedContent.replace(pattern, '')
    })
    
    // 3. ‚úÖ PRESERVAR tablas del editor WYSIWYG (NO tocar)
    // Las tablas del editor tienen: table-container, data-table-id, contenteditable="true"
    // NO eliminar contenido que contenga estos elementos
    
    // 4. Limpieza final: eliminar divs vac√≠os o con solo espacios (pero preservar tablas)
    cleanedContent = cleanedContent.replace(/<div[^>]*>\s*<\/div>/g, '')
    
    // 5. Limpiar espacios m√∫ltiples y l√≠neas vac√≠as
    cleanedContent = cleanedContent.replace(/\n\s*\n/g, '\n')
    cleanedContent = cleanedContent.replace(/\s{2,}/g, ' ')
    
    return cleanedContent.trim()
  }
  
  // ‚úÖ √öNICA TABLA PERMITIDA: Tabla del editor WYSIWYG (NO tabla de base de datos)
  const insertTable = () => {
    const targetRef = isCreateModalOpen ? newContentRef : contentRef
    if (targetRef.current) {
      const tableId = `table_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const tableHtml = `
        <div class="table-container my-4" data-table-id="${tableId}">
          <table class="min-w-full border-collapse border border-gray-300" style="background: white; table-layout: fixed; width: 100%;">
            <thead>
              <tr>
                <th class="border border-gray-300 px-4 py-2 bg-gray-100 font-semibold" contenteditable="true" style="width: 33.33%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')" draggable="true" ondragstart="handleColumnDragStart(event, '${tableId}', 0)" ondragover="handleColumnDragOver(event)" ondrop="handleColumnDrop(event, '${tableId}', 0)">Columna 1</th>
                <th class="border border-gray-300 px-4 py-2 bg-gray-100 font-semibold" contenteditable="true" style="width: 33.33%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')" draggable="true" ondragstart="handleColumnDragStart(event, '${tableId}', 1)" ondragover="handleColumnDragOver(event)" ondrop="handleColumnDrop(event, '${tableId}', 1)">Columna 2</th>
                <th class="border border-gray-300 px-4 py-2 bg-gray-100 font-semibold" contenteditable="true" style="width: 33.33%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')" draggable="true" ondragstart="handleColumnDragStart(event, '${tableId}', 2)" ondragover="handleColumnDragOver(event)" ondrop="handleColumnDrop(event, '${tableId}', 2)">Columna 3</th>
              </tr>
            </thead>
            <tbody>
              <tr>
                <td class="border border-gray-300 px-4 py-2" contenteditable="true" style="width: 33.33%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')">Dato 1</td>
                <td class="border border-gray-300 px-4 py-2" contenteditable="true" style="width: 33.33%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')">Dato 2</td>
                <td class="border border-gray-300 px-4 py-2" contenteditable="true" style="width: 33.33%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')">Dato 3</td>
              </tr>
            </tbody>
          </table>
          <div class="table-controls mb-2 flex gap-2" id="controls-${tableId}" style="display: none; position: absolute; background: white; border: 1px solid #ccc; border-radius: 4px; padding: 4px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); z-index: 1000;">
            <button class="text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600" onclick="addColumn('${tableId}')">+ Col</button>
            <button class="text-xs bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600" onclick="addRow('${tableId}')">+ Fila</button>
            <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeTable('${tableId}')">Eliminar</button>
          </div>
        </div>
      `
      
      const div = document.createElement('div')
      div.innerHTML = tableHtml
      targetRef.current.appendChild(div.firstElementChild!)
      
      // Hacer focus en la primera celda
      const firstCell = targetRef.current.querySelector(`[data-table-id="${tableId}"] th`) as HTMLElement
      if (firstCell) {
        firstCell.focus()
      }
    }
  }

  const insertAsciiArt = () => {
    const targetRef = isCreateModalOpen ? newContentRef : contentRef
    if (targetRef.current) {
      const asciiId = `ascii_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const asciiHtml = `
        <div class="ascii-art-container my-4" data-ascii-id="${asciiId}">
          <div class="table-controls mb-2">
            <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeAscii('${asciiId}')">Eliminar</button>
          </div>
          <pre class="font-mono text-sm my-4 p-4 bg-black text-green-400 rounded-md leading-tight whitespace-pre overflow-x-auto" contenteditable="true" style="font-size: 12px;">
    ‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
    ‚ïë           ASCII ART                  ‚ïë
    ‚ïë                                      ‚ïë
    ‚ïë     ¬°Edita este contenido!           ‚ïë
    ‚ïë                                      ‚ïë
    ‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
          </pre>
        </div>
      `
      
      const div = document.createElement('div')
      div.innerHTML = asciiHtml
      targetRef.current.appendChild(div.firstElementChild!)
    }
  }

  const insertQuote = () => {
    const targetRef = isCreateModalOpen ? newContentRef : contentRef
    if (targetRef.current) {
      const quoteId = `quote_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const quoteHtml = `
        <div class="quote-container my-4" data-quote-id="${quoteId}">
          <div class="table-controls mb-2">
            <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeQuote('${quoteId}')">Eliminar</button>
          </div>
          <blockquote class="border-l-4 border-gray-300 pl-4 my-4 italic text-gray-700" contenteditable="true">
            Esta es una cita. ¬°Edita este contenido!
          </blockquote>
        </div>
      `
      
      const div = document.createElement('div')
      div.innerHTML = quoteHtml
      targetRef.current.appendChild(div.firstElementChild!)
    }
  }

  const insertSeparator = () => {
    const targetRef = isCreateModalOpen ? newContentRef : contentRef
    if (targetRef.current) {
      const separatorId = `separator_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const separatorHtml = `
        <div class="separator-container my-4" data-separator-id="${separatorId}">
          <div class="table-controls mb-2">
            <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeSeparator('${separatorId}')">Eliminar</button>
          </div>
          <hr class="my-8 border-gray-300" />
          <div class="text-center text-gray-500 italic" contenteditable="true">
            Separador - Edita este texto
          </div>
        </div>
      `
      
      const div = document.createElement('div')
      div.innerHTML = separatorHtml
      targetRef.current.appendChild(div.firstElementChild!)
    }
  }

  // Funciones de formato de texto
  const formatText = (command: string) => {
    // Determinar qu√© editor est√° activo
    const activeEditor = isCreateModalOpen ? newContentRef.current : contentRef.current
    if (activeEditor) {
      // Asegurar que el editor activo tenga el foco
      activeEditor.focus()
      document.execCommand(command, false)
    }
  }

  // üéØ SISTEMA DE AUTO-CONVERSI√ìN COMPLETA: MARKDOWN + TSV ‚Üí TABLA VISUAL
  // Detecta autom√°ticamente cuando se pega una tabla en Markdown o TSV y la convierte
  
  // Funci√≥n para detectar si el contenido pegado es una tabla Markdown
  const detectMarkdownTable = (text: string): boolean => {
    const lines = text.trim().split('\n')
    if (lines.length < 2) return false
    
    // Verificar si tiene el patr√≥n de tabla Markdown: | col1 | col2 | col3 |
    const hasTableStructure = lines.some(line => 
      line.trim().startsWith('|') && line.trim().endsWith('|')
    )
    
    // Verificar si tiene separadores: | --- | --- | --- |
    const hasSeparators = lines.some(line => 
      line.trim().match(/^\|[\s\-:]+\|[\s\-:]+\|[\s\-:]+\|$/)
    )
    
    return hasTableStructure && hasSeparators
  }
  
  // üÜï Funci√≥n para detectar si el contenido pegado es una tabla TSV (Notion)
  const detectTSVTable = (text: string): boolean => {
    const lines = text.trim().split('\n')
    if (lines.length < 2) return false
    
    // Verificar si tiene el patr√≥n TSV: col1\tcol2\tcol3
    const hasTSVStructure = lines.some(line => 
      line.includes('\t') && line.split('\t').length >= 2
    )
    
    // Verificar que todas las l√≠neas tengan el mismo n√∫mero de columnas
    if (hasTSVStructure) {
      const columnCounts = lines.map(line => line.split('\t').length)
      const firstColumnCount = columnCounts[0]
      return columnCounts.every(count => count === firstColumnCount)
    }
    
    return false
  }
  
  // üéØ Funci√≥n unificada para detectar cualquier tipo de tabla
  const detectTableFormat = (text: string): 'markdown' | 'tsv' | null => {
    if (detectMarkdownTable(text)) return 'markdown'
    if (detectTSVTable(text)) return 'tsv'
    return null
  }
  
  // Funci√≥n para parsear tabla Markdown y convertirla a HTML del editor
  const parseMarkdownTableToEditorTable = (markdownText: string): string => {
    const lines = markdownText.trim().split('\n')
    const tableId = `table_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    // Filtrar l√≠neas que no son separadores
    const dataLines = lines.filter(line => 
      !line.trim().match(/^\|[\s\-:]+\|[\s\-:]+\|[\s\-:]+\|$/)
    )
    
    if (dataLines.length === 0) return markdownText
    
    // Parsear encabezados (primera l√≠nea)
    const headers = dataLines[0]
      .split('|')
      .map(cell => cell.trim())
      .filter(cell => cell.length > 0)
      .slice(1, -1) // Remover primer y √∫ltimo elemento vac√≠o
    
    // Parsear filas de datos
    const dataRows = dataLines.slice(1)
      .map(line => 
        line.split('|')
          .map(cell => cell.trim())
          .filter(cell => cell.length > 0)
          .slice(1, -1)
      )
      .filter(row => row.length > 0)
    
    return generateEditorTableHTML(headers, dataRows, tableId)
  }
  
  // üÜï Funci√≥n para parsear tabla TSV (Notion) y convertirla a HTML del editor
  const parseTSVTableToEditorTable = (tsvText: string): string => {
    const lines = tsvText.trim().split('\n')
    const tableId = `table_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
    
    if (lines.length < 2) return tsvText
    
    // Parsear encabezados (primera l√≠nea)
    const headers = lines[0]
      .split('\t')
      .map(cell => cell.trim())
      .filter(cell => cell.length > 0)
    
    // Parsear filas de datos
    const dataRows = lines.slice(1)
      .map(line => 
        line.split('\t')
          .map(cell => cell.trim())
          .filter(cell => cell.length > 0)
      )
      .filter(row => row.length > 0)
    
    return generateEditorTableHTML(headers, dataRows, tableId)
  }
  
  // üéØ Funci√≥n unificada para generar HTML de tabla del editor
  const generateEditorTableHTML = (headers: string[], dataRows: string[][], tableId: string): string => {
    let tableHtml = `<div class="table-container my-4" data-table-id="${tableId}">`
    tableHtml += '<table class="min-w-full border-collapse border border-gray-300" style="background: white; table-layout: fixed; width: 100%;">'
    
    // Generar encabezados
    tableHtml += '<thead><tr>'
    headers.forEach((header, index) => {
      tableHtml += `<th class="border border-gray-300 px-4 py-2 bg-gray-100 font-semibold" contenteditable="true" style="width: ${100/headers.length}%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')" draggable="true" ondragstart="handleColumnDragStart(event, '${tableId}', ${index})" ondragover="handleColumnDragOver(event)" ondrop="handleColumnDrop(event, '${tableId}', ${index})">${header}</th>`
    })
    tableHtml += '</tr></thead>'
    
    // Generar filas de datos
    tableHtml += '<tbody>'
    dataRows.forEach(row => {
      tableHtml += '<tr>'
      row.forEach((cell, index) => {
        tableHtml += `<td class="border border-gray-300 px-4 py-2" contenteditable="true" style="width: ${100/headers.length}%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')" onmouseup="handleTableSelection(event, '${tableId}')" onmousedown="handleTableSelection(event, '${tableId}')" onselectstart="handleTableSelection(event, '${tableId}')">${cell}</td>`
      })
      tableHtml += '</tr>'
    })
    tableHtml += '</tbody>'
    
    tableHtml += '</table>'
    
    // Agregar controles de tabla
    tableHtml += `<div class="table-controls mb-2 flex gap-2" id="controls-${tableId}" style="display: none; position: absolute; background: white; border: 1px solid #ccc; border-radius: 4px; padding: 4px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); z-index: 1000;">
      <button class="text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600" onclick="addColumn('${tableId}')">+ Col</button>
      <button class="text-xs bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600" onclick="addRow('${tableId}')">+ Fila</button>
      <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeTable('${tableId}')">Eliminar</button>
    </div>`
    
    tableHtml += '</div>'
    
    return tableHtml
  }
  
  // üéØ Funci√≥n para manejar el pegado inteligente (Markdown + TSV ‚Üí Tabla autom√°tica)
  const handleSmartPaste = (event: ClipboardEvent, targetRef: React.RefObject<HTMLDivElement>) => {
    if (!targetRef.current) return
    
    const clipboardData = event.clipboardData
    if (!clipboardData) return
    
    // Obtener texto plano del portapapeles
    const plainText = clipboardData.getData('text/plain')
    
    // üéØ Detectar el formato de tabla (Markdown o TSV)
    const tableFormat = detectTableFormat(plainText)
    
    if (tableFormat) {
      event.preventDefault()
      
      let tableHtml: string
      let formatName: string
      
      // Convertir seg√∫n el formato detectado
      if (tableFormat === 'markdown') {
        tableHtml = parseMarkdownTableToEditorTable(plainText)
        formatName = 'Markdown'
      } else if (tableFormat === 'tsv') {
        tableHtml = parseTSVTableToEditorTable(plainText)
        formatName = 'TSV (Notion)'
      } else {
        return
      }
      
      // Insertar la tabla en el editor
      const selection = window.getSelection()
      if (selection && selection.rangeCount > 0) {
        const range = selection.getRangeAt(0)
        const div = document.createElement('div')
        div.innerHTML = tableHtml
        range.deleteContents()
        range.insertNode(div.firstElementChild!)
        
        // Limpiar la selecci√≥n
        selection.removeAllRanges()
        
        console.log(`üéØ Tabla ${formatName} convertida autom√°ticamente a tabla visual`)
        
        // Mostrar notificaci√≥n de √©xito con formato espec√≠fico
        if (targetRef.current) {
          const notification = document.createElement('div')
          notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded shadow-lg z-50 font-medium'
          notification.innerHTML = `
            <div class="flex items-center gap-2">
              <svg class="w-5 h-5" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 12l2 2 4-4m6 2a9 9 0 11-18 0 9 9 0 0118 0z"></path>
              </svg>
              <span>Tabla ${formatName} convertida autom√°ticamente</span>
            </div>
          `
          document.body.appendChild(notification)
          
          setTimeout(() => {
            if (document.body.contains(notification)) {
              document.body.removeChild(notification)
            }
          }, 4000)
        }
      }
    }
  }
  
  // Funci√≥n para prevenir inserci√≥n de tablas de base de datos en tiempo real
  const preventDatabaseTableInsertion = (event: ClipboardEvent | InputEvent) => {
    const target = event.target as HTMLElement
    if (target && target.innerHTML) {
      // Detectar si se est√° intentando insertar contenido de tabla de base de datos
      if (target.innerHTML.includes('database-container') || 
          target.innerHTML.includes('data-database-id') ||
          target.innerHTML.includes('database_')) {
        // ‚úÖ NO limpiar contenido - preservar tablas tal como est√°n
        console.log('‚úÖ Contenido preservado sin modificaci√≥n')
      }
    }
  }

  // Agregar estilos CSS para mejorar la selecci√≥n de texto en tablas
  useEffect(() => {
    const style = document.createElement('style')
    style.textContent = `
      .table-container table {
        user-select: text !important;
        -webkit-user-select: text !important;
        -moz-user-select: text !important;
        -ms-user-select: text !important;
      }
      
      .table-container td,
      .table-container th {
        user-select: text !important;
        -webkit-user-select: text !important;
        -moz-user-select: text !important;
        -ms-user-select: text !important;
        position: relative;
      }
      
      .table-container td:empty,
      .table-container th:empty {
        user-select: none !important;
        -webkit-user-select: none !important;
        -moz-user-select: none !important;
        -ms-user-select: none !important;
      }
      
      .table-container td:empty::before,
      .table-container th:empty::before {
        content: '\\00a0';
        visibility: hidden;
        pointer-events: none;
      }
      
      /* Prevenir selecci√≥n de espacios entre celdas */
      .table-container table::before,
      .table-container table::after,
      .table-container tr::before,
      .table-container tr::after {
        user-select: none !important;
        -webkit-user-select: none !important;
        -moz-user-select: none !important;
        -ms-user-select: none !important;
        pointer-events: none;
      }
      
      /* Mejorar la experiencia de selecci√≥n */
      .table-container td:hover,
      .table-container th:hover {
        background-color: rgba(59, 130, 246, 0.05);
      }
      
      .table-container td:focus,
      .table-container th:focus {
        outline: 2px solid #3b82f6;
        outline-offset: -2px;
      }
      
      /* üéØ Estilos para Drag & Drop de columnas */
      .table-container th[draggable="true"] {
        cursor: grab;
        transition: all 0.2s ease;
      }
      
      .table-container th[draggable="true"]:active {
        cursor: grabbing;
        transform: scale(1.02);
      }
      
      .table-container th[draggable="true"]:hover {
        background-color: rgba(59, 130, 246, 0.1);
        box-shadow: 0 2px 8px rgba(59, 130, 246, 0.2);
      }
      
      /* Indicador visual durante el arrastre */
      .table-container th.dragging {
        opacity: 0.5;
        transform: rotate(5deg);
        z-index: 1000;
      }
      
      /* Indicador visual de zona de soltura */
      .table-container th.drop-zone {
        border-left: 3px solid #3b82f6;
        background-color: #eff6ff;
        box-shadow: inset 0 0 0 2px rgba(59, 130, 246, 0.2);
      }
      
      /* Animaci√≥n de reordenamiento */
      .table-container th.reordering {
        transition: all 0.3s ease;
      }
    `
    document.head.appendChild(style)
    
    return () => {
      document.head.removeChild(style)
    }
  }, [])

  // Funciones globales para manejar elementos especiales
  useEffect(() => {
    // Funci√≥n para manejar selecci√≥n de texto en tablas (previene selecci√≥n de whitespace)
    ;(window as any).handleTableSelection = (event: MouseEvent, tableId: string) => {
      const selection = window.getSelection()
      if (!selection || selection.rangeCount === 0) return
      
      const range = selection.getRangeAt(0)
      const startContainer = range.startContainer
      const endContainer = range.endContainer
      
      // Solo permitir selecci√≥n dentro de celdas con contenido
      let validSelection = true
      
      // Verificar que el inicio y fin de la selecci√≥n est√©n en celdas v√°lidas
      if (startContainer.nodeType === Node.TEXT_NODE) {
        const cell = startContainer.parentElement?.closest('td, th')
        if (!cell || cell.textContent?.trim() === '') {
          validSelection = false
        }
      }
      
      if (endContainer.nodeType === Node.TEXT_NODE) {
        const cell = endContainer.parentElement?.closest('td, th')
        if (!cell || cell.textContent?.trim() === '') {
          validSelection = false
        }
      }
      
      // Si la selecci√≥n no es v√°lida, limpiarla
      if (!validSelection) {
        selection.removeAllRanges()
        return
      }
      
      // Restringir la selecci√≥n solo a contenido textual
      const table = document.querySelector(`[data-table-id="${tableId}"] table`)
      if (table) {
        // Asegurar que la selecci√≥n no incluya espacios vac√≠os entre celdas
        const walker = document.createTreeWalker(
          range.commonAncestorContainer,
          NodeFilter.SHOW_TEXT,
          {
            acceptNode: (node) => {
              const text = node.textContent || ''
              const parent = node.parentElement
              if (parent && (parent.tagName === 'TD' || parent.tagName === 'TH')) {
                return text.trim() ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_REJECT
              }
              return NodeFilter.FILTER_REJECT
            }
          }
        )
        
        // Si no hay nodos de texto v√°lidos, limpiar la selecci√≥n
        if (!walker.nextNode()) {
          selection.removeAllRanges()
        }
      }
    }
    
    // Funci√≥n para manejar teclas en tablas
    ;(window as any).handleTableKeydown = (event: KeyboardEvent, tableId: string) => {
      const target = event.target as HTMLElement
      const table = document.querySelector(`[data-table-id="${tableId}"] table`)
      if (!table) return

      const currentCell = target
      const currentRow = currentCell.parentElement
      const allRows = table.querySelectorAll('tr')
      const currentRowIndex = Array.from(allRows).indexOf(currentRow!)
      const currentCellIndex = Array.from(currentRow!.children).indexOf(currentCell)

      switch (event.key) {
        case 'Tab':
          event.preventDefault()
          const nextCell = getNextCell(currentCell, table)
          if (nextCell) {
            nextCell.focus()
          }
          break

        case 'Enter':
          if (event.ctrlKey) {
            // Ctrl+Enter: Agregar nueva columna
            event.preventDefault()
            addColumnToTable(tableId)
          } else {
            // Enter: Agregar nueva fila
            event.preventDefault()
            addRowToTable(tableId, currentRowIndex)
            // Focus en la primera celda de la nueva fila
            const newRow = table.querySelector(`tbody tr:nth-child(${currentRowIndex + 1})`)
            if (newRow) {
              const firstCell = newRow.querySelector('td') as HTMLElement
              if (firstCell) firstCell.focus()
            }
          }
          break

        case 'Backspace':
          if (currentCell.textContent === '') {
            // Si la celda est√° vac√≠a
            if (allRows.length > 1 && currentRowIndex > 0) {
              // Si hay m√°s de una fila y no es el header, eliminar la fila
              event.preventDefault()
              currentRow!.remove()
              // Focus en la celda anterior
              const prevRow = allRows[currentRowIndex - 1]
              if (prevRow) {
                const prevCell = prevRow.children[currentCellIndex] as HTMLElement
                if (prevCell) prevCell.focus()
              }
            } else if (allRows.length === 1) {
              // Si solo queda una fila, eliminar toda la tabla
              event.preventDefault()
              const tableContainer = document.querySelector(`[data-table-id="${tableId}"]`)
              if (tableContainer) {
                tableContainer.remove()
              }
            }
          }
          break

        case 'Delete':
          if (currentCell.textContent === '') {
            // Si la celda est√° vac√≠a
            if (allRows.length > 1 && currentRowIndex > 0) {
              // Si hay m√°s de una fila y no es el header, eliminar la fila
              event.preventDefault()
              currentRow!.remove()
              // Focus en la celda siguiente
              const nextRow = allRows[currentRowIndex + 1]
              if (nextRow) {
                const nextCell = nextRow.children[currentCellIndex] as HTMLElement
                if (nextCell) nextCell.focus()
              }
            } else if (allRows.length === 1) {
              // Si solo queda una fila, eliminar toda la tabla
              event.preventDefault()
              const tableContainer = document.querySelector(`[data-table-id="${tableId}"]`)
              if (tableContainer) {
                tableContainer.remove()
              }
            }
          }
          break
      }
    }

    // Funci√≥n para mostrar controles de tabla al hacer clic
    ;(window as any).showTableControls = (tableId: string) => {
      // Ocultar todos los controles primero
      document.querySelectorAll('.table-controls').forEach(control => {
        (control as HTMLElement).style.display = 'none'
      })

      // Mostrar los controles de esta tabla
      const controls = document.getElementById(`controls-${tableId}`)
      if (controls) {
        controls.style.display = 'flex'
        
        // Posicionar los controles cerca de la tabla
        const table = document.querySelector(`[data-table-id="${tableId}"]`)
        if (table) {
          const rect = table.getBoundingClientRect()
          controls.style.position = 'absolute'
          controls.style.top = `${rect.top - 40}px`
          controls.style.left = `${rect.left}px`
        }
      }
    }

    // Ocultar controles al hacer clic fuera
    document.addEventListener('click', (event) => {
      const target = event.target as HTMLElement
      if (!target.closest('.table-controls') && !target.closest('th') && !target.closest('td')) {
        document.querySelectorAll('.table-controls').forEach(control => {
          (control as HTMLElement).style.display = 'none'
        })
      }
    })

    // Listener global para mejorar la selecci√≥n de texto en tablas
    document.addEventListener('selectionchange', () => {
      const selection = window.getSelection()
      if (!selection || selection.rangeCount === 0) return
      
      const range = selection.getRangeAt(0)
      const startContainer = range.startContainer
      const endContainer = range.endContainer
      
      // Verificar si la selecci√≥n est√° en una tabla
      const tableContainer = startContainer.nodeType === Node.TEXT_NODE 
        ? startContainer.parentElement?.closest('.table-container')
        : startContainer.closest('.table-container')
      
      if (tableContainer) {
        const tableId = tableContainer.getAttribute('data-table-id')
        if (tableId) {
          // Aplicar l√≥gica de selecci√≥n mejorada
          ;(window as any).handleTableSelection({} as MouseEvent, tableId)
        }
      }
    })

    // Listener global para prevenir inserci√≥n de tablas de base de datos
    document.addEventListener('paste', (event) => {
      const target = event.target as HTMLElement
      if (target && target.contentEditable === 'true') {
        // Verificar si el contenido pegado contiene tablas de base de datos
        const clipboardData = event.clipboardData
        if (clipboardData) {
          const pastedText = clipboardData.getData('text/html') || clipboardData.getData('text')
          if (pastedText.includes('database-container') || 
              pastedText.includes('data-database-id') ||
              pastedText.includes('database_')) {
            event.preventDefault()
            console.warn('üö´ Se bloque√≥ la inserci√≥n de tabla de base de datos')
            // Opcional: mostrar mensaje al usuario
            alert('No se pueden insertar tablas de base de datos. Solo se permiten tablas del editor WYSIWYG.')
          }
        }
      }
    })

    // Listener para prevenir inserci√≥n de tablas de base de datos en tiempo real
    document.addEventListener('input', (event) => {
      const target = event.target as HTMLElement
      if (target && target.contentEditable === 'true') {
        setTimeout(() => {
          if (target.innerHTML.includes('database-container') || 
              target.innerHTML.includes('data-database-id') ||
              target.innerHTML.includes('database_') ||
              target.innerHTML.includes('Estado') ||
              target.innerHTML.includes('Prioridad') ||
              target.innerHTML.includes('Asignado') ||
              target.innerHTML.includes('Fecha l√≠mite') ||
              target.innerHTML.includes('Etiquetas') ||
              target.innerHTML.includes('Progreso')) {
            // ‚úÖ NO limpiar contenido - preservar tablas tal como est√°n
            console.log('‚úÖ Contenido preservado sin modificaci√≥n')
          }
        }, 100)
      }
    })

    // Listener para limpiar contenido cuando se abre cualquier modal
    const observer = new MutationObserver((mutations) => {
      mutations.forEach((mutation) => {
        if (mutation.type === 'childList') {
          mutation.addedNodes.forEach((node) => {
            if (node.nodeType === Node.ELEMENT_NODE) {
              const element = node as Element
              // Buscar editores contentEditable en el modal
              const editors = element.querySelectorAll('[contenteditable="true"]')
              editors.forEach(editor => {
                if (editor.innerHTML.includes('Estado') || 
                    editor.innerHTML.includes('Prioridad') ||
                    editor.innerHTML.includes('Asignado') ||
                    editor.innerHTML.includes('Fecha l√≠mite') ||
                    editor.innerHTML.includes('Etiquetas') ||
                    editor.innerHTML.includes('Progreso')) {
                  // ‚úÖ NO limpiar contenido - preservar tablas tal como est√°n
                  console.log('‚úÖ Contenido preservado sin modificaci√≥n')
                }
              })
            }
          })
        }
      })
    })

    // Observar cambios en el body para detectar modales
    observer.observe(document.body, {
      childList: true,
      subtree: true
    })

    // Limpieza autom√°tica peri√≥dica para eliminar contenido residual
    setInterval(() => {
      const editors = document.querySelectorAll('[contenteditable="true"]')
      editors.forEach(editor => {
        if (editor.innerHTML.includes('Estado') || 
            editor.innerHTML.includes('Prioridad') ||
            editor.innerHTML.includes('Asignado') ||
            editor.innerHTML.includes('Fecha l√≠mite') ||
            editor.innerHTML.includes('Etiquetas') ||
            editor.innerHTML.includes('Progreso') ||
            editor.innerHTML.includes('En progreso') ||
            editor.innerHTML.includes('Alta') ||
            editor.innerHTML.includes('Sin asignar') ||
            editor.innerHTML.includes('Sin fecha') ||
            editor.innerHTML.includes('Sin etiquetas') ||
            editor.innerHTML.includes('0%')) {
          // ‚úÖ NO limpiar contenido - preservar tablas tal como est√°n
          console.log('‚úÖ Contenido preservado sin modificaci√≥n')
        }
      })
    }, 2000) // Ejecutar cada 2 segundos

    // Funci√≥n para manejar pegado en tablas
    ;(window as any).handleTablePaste = (event: ClipboardEvent) => {
      event.preventDefault()
      const text = event.clipboardData?.getData('text/plain') || ''
      const target = event.target as HTMLElement
      
      // Si el texto contiene tabulaciones, es probablemente una tabla
      if (text.includes('\t')) {
        const lines = text.split('\n').filter(line => line.trim())
        if (lines.length > 0) {
          const firstLine = lines[0]
          const columns = firstLine.split('\t')
          
          // Crear tabla desde datos pegados
          const tableId = `table_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
          let tableHtml = `
            <div class="table-container my-4" data-table-id="${tableId}">
              <div class="table-controls mb-2 flex gap-2">
                <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeTable('${tableId}')">Eliminar Tabla</button>
                <span class="text-xs text-gray-500 flex items-center">üí° Usa Tab para navegar, Enter para nueva fila, Ctrl+Enter para nueva columna</span>
              </div>
              <table class="min-w-full border-collapse border border-gray-300" style="background: white; table-layout: fixed; width: 100%;">
                <thead><tr>`
          
                     // Headers
           columns.forEach(() => {
             tableHtml += `<th class="border border-gray-300 px-4 py-2 bg-gray-100 font-semibold" contenteditable="true" style="width: ${100/columns.length}%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')"></th>`
           })
           
           tableHtml += '</tr></thead><tbody>'
           
           // Data rows
           lines.forEach((line, lineIndex) => {
             if (lineIndex === 0) return // Skip header
             const cells = line.split('\t')
             tableHtml += '<tr>'
             cells.forEach(() => {
               tableHtml += `<td class="border border-gray-300 px-4 py-2" contenteditable="true" style="width: ${100/columns.length}%; min-height: 40px; vertical-align: top;" onkeydown="handleTableKeydown(event, '${tableId}')" onpaste="handleTablePaste(event)" onclick="showTableControls('${tableId}')"></td>`
             })
             tableHtml += '</tr>'
           })
          
                     tableHtml += `</tbody></table>
           <div class="table-controls mb-2 flex gap-2" id="controls-${tableId}" style="display: none; position: absolute; background: white; border: 1px solid #ccc; border-radius: 4px; padding: 4px; box-shadow: 0 2px 8px rgba(0,0,0,0.1); z-index: 1000;">
             <button class="text-xs bg-blue-500 text-white px-2 py-1 rounded hover:bg-blue-600" onclick="addColumn('${tableId}')">+ Col</button>
             <button class="text-xs bg-green-500 text-white px-2 py-1 rounded hover:bg-green-600" onclick="addRow('${tableId}')">+ Fila</button>
             <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeTable('${tableId}')">Eliminar</button>
           </div></div>`
          
          // Insertar tabla
          const div = document.createElement('div')
          div.innerHTML = tableHtml
          target.parentElement?.parentElement?.parentElement?.parentElement?.appendChild(div.firstElementChild!)
          
          // Llenar con datos
          const newTable = document.querySelector(`[data-table-id="${tableId}"] table`)
          if (newTable) {
            const headerCells = newTable.querySelectorAll('thead th')
            const dataRows = newTable.querySelectorAll('tbody tr')
            
            // Llenar headers
            columns.forEach((col, index) => {
              if (headerCells[index]) {
                headerCells[index].textContent = col
              }
            })
            
            // Llenar datos
            lines.forEach((line, lineIndex) => {
              if (lineIndex === 0) return
              const cells = line.split('\t')
              const row = dataRows[lineIndex - 1]
              if (row) {
                const rowCells = row.querySelectorAll('td')
                cells.forEach((cell, cellIndex) => {
                  if (rowCells[cellIndex]) {
                    rowCells[cellIndex].textContent = cell
                  }
                })
              }
            })
          }
        }
      } else {
        // Texto normal, insertar normalmente
        document.execCommand('insertText', false, text)
      }
    }

    // Funci√≥n auxiliar para obtener la siguiente celda
    const getNextCell = (currentCell: HTMLElement, table: Element): HTMLElement | null => {
      const currentRow = currentCell.parentElement
      const allRows = table.querySelectorAll('tr')
      const currentRowIndex = Array.from(allRows).indexOf(currentRow!)
      const currentCellIndex = Array.from(currentRow!.children).indexOf(currentCell)

      // Buscar en la misma fila
      if (currentCellIndex < currentRow!.children.length - 1) {
        return currentRow!.children[currentCellIndex + 1] as HTMLElement
      }

      // Buscar en la siguiente fila
      if (currentRowIndex < allRows.length - 1) {
        const nextRow = allRows[currentRowIndex + 1]
        if (nextRow.children[currentCellIndex]) {
          return nextRow.children[currentCellIndex] as HTMLElement
        }
      }

      return null
    }

    // Funci√≥n para agregar columna a tabla
    const addColumnToTable = (tableId: string) => {
      const table = document.querySelector(`[data-table-id="${tableId}"] table`)
      if (table) {
        const rows = table.querySelectorAll('tr')
        const columnCount = rows[0]?.children.length || 0
        
        rows.forEach((row, rowIndex) => {
          const cell = document.createElement(rowIndex === 0 ? 'th' : 'td')
          cell.className = rowIndex === 0 
            ? 'border border-gray-300 px-4 py-2 bg-gray-100 font-semibold' 
            : 'border border-gray-300 px-4 py-2'
          cell.contentEditable = 'true'
          cell.style.width = `${100/(columnCount + 1)}%`
          cell.style.minHeight = '40px'
          cell.style.verticalAlign = 'top'
          cell.textContent = rowIndex === 0 ? 'Nueva Columna' : 'Nuevo Dato'
          cell.setAttribute('onkeydown', `handleTableKeydown(event, '${tableId}')`)
          cell.setAttribute('onpaste', 'handleTablePaste(event)')
          cell.setAttribute('onclick', `showTableControls('${tableId}')`)
          cell.setAttribute('onmouseup', `handleTableSelection(event, '${tableId}')`)
          cell.setAttribute('onmousedown', `handleTableSelection(event, '${tableId}')`)
          cell.setAttribute('onselectstart', `handleTableSelection(event, '${tableId}')`)
          
          // üéØ Agregar atributos de drag & drop solo para encabezados (th)
          if (rowIndex === 0) {
            const newColumnIndex = columnCount
            cell.setAttribute('draggable', 'true')
            cell.setAttribute('ondragstart', `handleColumnDragStart(event, '${tableId}', ${newColumnIndex})`)
            cell.setAttribute('ondragover', 'handleColumnDragOver(event)')
            cell.setAttribute('ondrop', `handleColumnDrop(event, '${tableId}', ${newColumnIndex})`)
          }
          
          row.appendChild(cell)
        })

        // Ajustar ancho de todas las columnas
        const newColumnCount = columnCount + 1
        rows.forEach(row => {
          Array.from(row.children).forEach(cell => {
            (cell as HTMLElement).style.width = `${100/newColumnCount}%`
          })
        })
      }
    }

    // Funci√≥n para agregar fila a tabla
    const addRowToTable = (tableId: string, afterRowIndex: number) => {
      const table = document.querySelector(`[data-table-id="${tableId}"] table`)
      if (table) {
        const tbody = table.querySelector('tbody')
        const headerRow = table.querySelector('thead tr')
        const headerCells = headerRow?.querySelectorAll('th') || []
        
        const newRow = document.createElement('tr')
        headerCells.forEach((_, index) => {
          const cell = document.createElement('td')
          cell.className = 'border border-gray-300 px-4 py-2'
          cell.contentEditable = 'true'
          cell.style.width = `${100/headerCells.length}%`
          cell.style.minHeight = '40px'
          cell.style.verticalAlign = 'top'
          cell.textContent = 'Nuevo Dato'
          cell.setAttribute('onkeydown', `handleTableKeydown(event, '${tableId}')`)
          cell.setAttribute('onpaste', 'handleTablePaste(event)')
          cell.setAttribute('onclick', `showTableControls('${tableId}')`)
          cell.setAttribute('onmouseup', `handleTableSelection(event, '${tableId}')`)
          cell.setAttribute('onmousedown', `handleTableSelection(event, '${tableId}')`)
          cell.setAttribute('onselectstart', `handleTableSelection(event, '${tableId}')`)
          newRow.appendChild(cell)
        })

        if (tbody) {
          const existingRows = tbody.querySelectorAll('tr')
          if (afterRowIndex >= existingRows.length) {
            tbody.appendChild(newRow)
          } else {
            tbody.insertBefore(newRow, existingRows[afterRowIndex])
          }
        }
      }
    }

    // Funci√≥n para agregar columna a tabla (legacy)
    ;(window as any).addColumn = (tableId: string) => {
      addColumnToTable(tableId)
    }

    // Funci√≥n para agregar fila a tabla (legacy)
    ;(window as any).addRow = (tableId: string) => {
      addRowToTable(tableId, 0)
    }

    // Funci√≥n para eliminar tabla
    ;(window as any).removeTable = (tableId: string) => {
      const tableContainer = document.querySelector(`[data-table-id="${tableId}"]`)
      if (tableContainer) {
        tableContainer.remove()
      }
    }

    // Funci√≥n para eliminar ASCII art
    ;(window as any).removeAscii = (asciiId: string) => {
      const asciiContainer = document.querySelector(`[data-ascii-id="${asciiId}"]`)
      if (asciiContainer) {
        asciiContainer.remove()
      }
    }

    // Funci√≥n para eliminar cita
    ;(window as any).removeQuote = (quoteId: string) => {
      const quoteContainer = document.querySelector(`[data-quote-id="${quoteId}"]`)
      if (quoteContainer) {
        quoteContainer.remove()
      }
    }

    // Funci√≥n para eliminar separador
    ;(window as any).removeSeparator = (separatorId: string) => {
      const separatorContainer = document.querySelector(`[data-separator-id="${separatorId}"]`)
      if (separatorContainer) {
        separatorContainer.remove()
      }
    }

    // üéØ FUNCIONES DE DRAG & DROP PARA COLUMNAS
    // Permite al usuario arrastrar y soltar columnas para reordenarlas
    
    // Funci√≥n para iniciar el arrastre de una columna
    ;(window as any).handleColumnDragStart = (event: DragEvent, tableId: string, columnIndex: number) => {
      if (event.dataTransfer) {
        event.dataTransfer.setData('text/plain', JSON.stringify({ tableId, columnIndex }))
        event.dataTransfer.effectAllowed = 'move'
        
        // Agregar estilo visual durante el arrastre
        const target = event.target as HTMLElement
        if (target) {
          target.style.opacity = '0.5'
          target.style.transform = 'rotate(5deg)'
        }
      }
    }
    
    // Funci√≥n para permitir soltar en otras columnas
    ;(window as any).handleColumnDragOver = (event: DragEvent) => {
      event.preventDefault()
      event.dataTransfer!.dropEffect = 'move'
      
      // Agregar indicador visual de zona de soltura
      const target = event.target as HTMLElement
      if (target && target.tagName === 'TH') {
        target.style.borderLeft = '3px solid #3b82f6'
        target.style.backgroundColor = '#eff6ff'
      }
    }
    
    // Funci√≥n para manejar el soltado de una columna
    ;(window as any).handleColumnDrop = (event: DragEvent, tableId: string, targetColumnIndex: number) => {
      event.preventDefault()
      
      try {
        const data = JSON.parse(event.dataTransfer!.getData('text/plain'))
        const { tableId: sourceTableId, columnIndex: sourceColumnIndex } = data
        
        // Solo permitir reordenar dentro de la misma tabla
        if (sourceTableId !== tableId) return
        
        // Restaurar estilos visuales
        const target = event.target as HTMLElement
        if (target && target.tagName === 'TH') {
          target.style.borderLeft = ''
          target.style.backgroundColor = ''
        }
        
        // Reordenar columnas
        reorderTableColumns(tableId, sourceColumnIndex, targetColumnIndex)
        
      } catch (error) {
        console.error('Error al reordenar columnas:', error)
      }
    }
    
    // Funci√≥n para reordenar las columnas de una tabla
    const reorderTableColumns = (tableId: string, sourceIndex: number, targetIndex: number) => {
      const tableContainer = document.querySelector(`[data-table-id="${tableId}"]`)
      if (!tableContainer) return
      
      const table = tableContainer.querySelector('table')
      if (!table) return
      
      const thead = table.querySelector('thead tr')
      const tbody = table.querySelector('tbody')
      
      if (!thead || !tbody) return
      
      // Obtener todas las filas del tbody
      const tbodyRows = Array.from(tbody.querySelectorAll('tr'))
      
      // Reordenar encabezados
      const headerCells = Array.from(thead.querySelectorAll('th'))
      if (sourceIndex < headerCells.length && targetIndex < headerCells.length) {
        const sourceHeader = headerCells[sourceIndex]
        const targetHeader = headerCells[targetIndex]
        
        // Actualizar √≠ndices en los eventos de drag & drop
        sourceHeader.setAttribute('ondragstart', `handleColumnDragStart(event, '${tableId}', ${targetIndex})`)
        sourceHeader.setAttribute('ondrop', `handleColumnDrop(event, '${tableId}', ${targetIndex})`)
        
        targetHeader.setAttribute('ondragstart', `handleColumnDragStart(event, '${tableId}', ${sourceIndex})`)
        targetHeader.setAttribute('ondrop', `handleColumnDrop(event, '${tableId}', ${sourceIndex})`)
        
        // Mover el encabezado
        if (sourceIndex < targetIndex) {
          thead.insertBefore(sourceHeader, targetHeader.nextSibling)
        } else {
          thead.insertBefore(sourceHeader, targetHeader)
        }
      }
      
      // Reordenar celdas del cuerpo
      tbodyRows.forEach(row => {
        const cells = Array.from(row.querySelectorAll('td'))
        if (sourceIndex < cells.length && targetIndex < cells.length) {
          const sourceCell = cells[sourceIndex]
          const targetCell = cells[targetIndex]
          
          // Mover la celda
          if (sourceIndex < targetIndex) {
            row.insertBefore(sourceCell, targetCell.nextSibling)
          } else {
            row.insertBefore(sourceCell, targetCell)
          }
        }
      })
      
      // Restaurar estilos visuales
      const allHeaders = table.querySelectorAll('th')
      allHeaders.forEach(header => {
        const th = header as HTMLElement
        th.style.opacity = ''
        th.style.transform = ''
      })
      
      console.log(`‚úÖ Columna ${sourceIndex} movida a posici√≥n ${targetIndex} en tabla ${tableId}`)
    }
  }, [])

  const getStatusColor = (status: string) => {
    switch (status) {
      case "published":
        return "bg-green-100 text-green-800"
      case "draft":
        return "bg-gray-100 text-gray-800"
      case "scheduled":
        return "bg-blue-100 text-blue-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case "published":
        return "Publicado"
      case "draft":
        return "Borrador"
      case "scheduled":
        return "Programado"
      default:
        return status
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">üìù Gesti√≥n de Posts</h1>
            <p className="text-gray-600 mt-2">Administra el contenido del blog y las publicaciones</p>
          </div>
        </div>
        <div className="text-center py-8">
          <p className="text-gray-500">Cargando posts...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">üìù Gesti√≥n de Posts</h1>
            <p className="text-gray-600 mt-2">Administra el contenido del blog y las publicaciones</p>
          </div>
        </div>
        <div className="text-center py-8">
          <p className="text-red-500">Error: {error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">üìù Gesti√≥n de Posts</h1>
          <p className="text-gray-600 mt-2">Administra el contenido del blog y las publicaciones</p>
        </div>
        <Button className="bg-blue-600 hover:bg-blue-700" onClick={handleCreateNewPost}>
          <Plus className="w-4 h-4 mr-2" />
          Nuevo Post
        </Button>
      </div>

      {/* Mensaje de √©xito */}
      {saveMessage && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
          {saveMessage}
        </div>
      )}

      {/* Mensaje de √©xito para creaci√≥n */}
      {createMessage && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
          {createMessage}
        </div>
      )}

      {/* Estad√≠sticas */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
            <div className="text-sm text-gray-600">Total Posts</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-green-600">{stats.published}</div>
            <div className="text-sm text-gray-600">Publicados</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-gray-600">{stats.drafts}</div>
            <div className="text-sm text-gray-600">Borradores</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-blue-600">{stats.scheduled}</div>
            <div className="text-sm text-gray-600">Programados</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-purple-600">{stats.total_views}</div>
            <div className="text-sm text-gray-600">Total Vistas</div>
          </CardContent>
        </Card>
      </div>

      {/* Lista de Posts */}
      <Card>
        <CardHeader>
          <CardTitle>Posts ({posts.length})</CardTitle>
          <CardDescription>Lista de todos los posts del blog</CardDescription>
        </CardHeader>
        <CardContent>
          {posts.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">No hay posts disponibles</p>
            </div>
          ) : (
            <div className="space-y-4">
              {posts.map((post) => (
                <div key={post.id} className="border rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <h3 className="font-semibold text-lg">{post.title}</h3>
                      <p className="text-gray-600 text-sm mt-1">{post.excerpt}</p>
                      <div className="flex items-center gap-4 mt-2 text-sm text-gray-500">
                        <span className="flex items-center gap-1">
                          <User className="w-4 h-4" />
                          {post.author}
                        </span>
                        <span className="flex items-center gap-1">
                          <Calendar className="w-4 h-4" />
                          {new Date(post.created_at).toLocaleDateString()}
                        </span>
                        <span className="flex items-center gap-1">
                          <Eye className="w-4 h-4" />
                          {post.views} vistas
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(post.status)}>
                        {getStatusText(post.status)}
                      </Badge>
                      <Button variant="outline" size="sm" onClick={() => handleEdit(post)}>
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button variant="outline" size="sm" onClick={() => handleDelete(post.id)}>
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Modal de Edici√≥n */}
      {isEditModalOpen && editingPost && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-6xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Editar Post</h2>
              <Button variant="outline" size="sm" onClick={handleCloseModal}>
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T√≠tulo
                </label>
                <input
                  type="text"
                  value={editTitle}
                  onChange={(e) => setEditTitle(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Extracto
                </label>
                <textarea
                  value={editExcerpt}
                  onChange={(e) => setEditExcerpt(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Imagen Destacada (URL)
                </label>
                <input
                  type="url"
                  value={editFeaturedImage}
                  onChange={(e) => setEditFeaturedImage(e.target.value)}
                  placeholder="https://ejemplo.com/imagen.jpg"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <p className="text-sm text-gray-500 mt-1">
                  URL de la imagen que se mostrar√° como thumbnail del post
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contenido
                </label>
                
                {/* Barra de herramientas de formato */}
                <div className="flex items-center gap-2 mb-2 p-2 bg-gray-50 rounded-md border">
                  <span className="text-sm text-gray-600 mr-2">Formato:</span>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('bold')}
                    className="flex items-center gap-1"
                  >
                    <Bold className="w-4 h-4" />
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('italic')}
                    className="flex items-center gap-1"
                  >
                    <Italic className="w-4 h-4" />
                  </Button>
                  
                  <div className="ml-4 border-l border-gray-300 pl-4">
                    <span className="text-sm text-gray-600 mr-2">Insertar:</span>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertTable}
                      className="flex items-center gap-1"
                    >
                      <Table className="w-4 h-4" />
                      Tabla
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertAsciiArt}
                      className="flex items-center gap-1"
                    >
                      <Code className="w-4 h-4" />
                      ASCII Art
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertQuote}
                      className="flex items-center gap-1"
                    >
                      <Type className="w-4 h-4" />
                      Cita
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertSeparator}
                      className="flex items-center gap-1"
                    >
                      <Minus className="w-4 h-4" />
                      Separador
                    </Button>
                  </div>
                </div>
                
                {/* Editor WYSIWYG real */}
                <div
                  ref={contentRef}
                  contentEditable
                  className="w-full min-h-[500px] px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900 overflow-y-auto prose max-w-none"
                  style={{ 
                    whiteSpace: 'pre-wrap',
                    wordWrap: 'break-word',
                    lineHeight: '1.6'
                  }}
                  placeholder="Escribe el contenido del post aqu√≠... Usa los botones de arriba para insertar elementos especiales."
                  dangerouslySetInnerHTML={{ __html: editContent }}
                  onPaste={(e) => handleSmartPaste(e, contentRef)}
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <Button variant="outline" onClick={handleCloseModal}>
                Cancelar
              </Button>
              <Button 
                onClick={handleSaveEdit} 
                disabled={isSaving}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isSaving ? 'Guardando...' : 'Guardar Cambios'}
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Creaci√≥n de Nuevo Post */}
      {isCreateModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-6xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Crear Nuevo Post</h2>
              <Button variant="outline" size="sm" onClick={handleCloseCreateModal}>
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  T√≠tulo *
                </label>
                <input
                  type="text"
                  value={newTitle}
                  onChange={(e) => setNewTitle(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="T√≠tulo del post"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Extracto
                </label>
                <textarea
                  value={newExcerpt}
                  onChange={(e) => setNewExcerpt(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Breve descripci√≥n del post"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Imagen Destacada (URL)
                </label>
                <input
                  type="url"
                  value={newFeaturedImage}
                  onChange={(e) => setNewFeaturedImage(e.target.value)}
                  placeholder="https://ejemplo.com/imagen.jpg"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <p className="text-sm text-gray-500 mt-1">
                  URL de la imagen que se mostrar√° como thumbnail del post
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contenido
                </label>
                
                {/* Barra de herramientas de formato */}
                <div className="flex items-center gap-2 mb-2 p-2 bg-gray-50 rounded-md border">
                  <span className="text-sm text-gray-600 mr-2">Formato:</span>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('bold')}
                    className="flex items-center gap-1"
                  >
                    <Bold className="w-4 h-4" />
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('italic')}
                    className="flex items-center gap-1"
                  >
                    <Italic className="w-4 h-4" />
                  </Button>
                  
                  <div className="ml-4 border-l border-gray-300 pl-4">
                    <span className="text-sm text-gray-600 mr-2">Insertar:</span>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertTable}
                      className="flex items-center gap-1"
                    >
                      <Table className="w-4 h-4" />
                      Tabla
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertAsciiArt}
                      className="flex items-center gap-1"
                    >
                      <Code className="w-4 h-4" />
                      ASCII Art
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertQuote}
                      className="flex items-center gap-1"
                    >
                      <Type className="w-4 h-4" />
                      Cita
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertSeparator}
                      className="flex items-center gap-1"
                    >
                      <Minus className="w-4 h-4" />
                      Separador
                    </Button>
                  </div>
                </div>
                
                {/* Editor WYSIWYG real */}
                <div
                  ref={newContentRef}
                  contentEditable
                  className="w-full min-h-[500px] px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900 overflow-y-auto prose max-w-none"
                  style={{ 
                    whiteSpace: 'pre-wrap',
                    wordWrap: 'break-word',
                    lineHeight: '1.6'
                  }}
                  placeholder="Escribe el contenido del post aqu√≠... Usa los botones de arriba para insertar elementos especiales."
                  onPaste={(e) => handleSmartPaste(e, newContentRef)}
                />
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <Button variant="outline" onClick={handleCloseCreateModal}>
                Cancelar
              </Button>
              <Button 
                onClick={handleSaveNewPost} 
                disabled={isCreating}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isCreating ? 'Creando...' : 'Crear Post'}
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
}
