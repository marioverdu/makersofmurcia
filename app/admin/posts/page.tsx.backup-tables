"use client"

import { useEffect, useState, useRef } from "react"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Badge } from "@/components/ui/badge"
import { Plus, Edit, Trash2, User, Calendar, Eye, X, Type, Code, Minus, Bold, Italic, Underline } from "lucide-react"
import type { Post } from "@/lib/posts-db"

export default function AdminPostsPage() {
  const [posts, setPosts] = useState<Post[]>([])
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string | null>(null)
  const [stats, setStats] = useState({
    total: 0,
    published: 0,
    drafts: 0,
    scheduled: 0,
    total_views: 0
  })

  // Estados para el modal de edición
  const [isEditModalOpen, setIsEditModalOpen] = useState(false)
  const [editingPost, setEditingPost] = useState<Post | null>(null)
  const [editTitle, setEditTitle] = useState("")
  const [editExcerpt, setEditExcerpt] = useState("")
  const [editContent, setEditContent] = useState("")
  const [editFeaturedImage, setEditFeaturedImage] = useState("")
  const [isSaving, setIsSaving] = useState(false)
  const [saveMessage, setSaveMessage] = useState("")
  const contentRef = useRef<HTMLDivElement>(null)

  // Estados para el modal de creación
  const [isCreateModalOpen, setIsCreateModalOpen] = useState(false)
  const [newTitle, setNewTitle] = useState("")
  const [newExcerpt, setNewExcerpt] = useState("")
  const [newContent, setNewContent] = useState("")
  const [newFeaturedImage, setNewFeaturedImage] = useState("")
  const [isCreating, setIsCreating] = useState(false)
  const [createMessage, setCreateMessage] = useState("")
  const newContentRef = useRef<HTMLDivElement>(null)

  // Cargar posts al montar el componente
  useEffect(() => {
    loadPosts()
  }, [])

  const loadPosts = async () => {
    try {
      setLoading(true)
      const response = await fetch('/api/posts')
      if (!response.ok) {
        throw new Error('Error al cargar los posts')
      }
      const data = await response.json()
      setPosts(data || [])
      
      // Calcular estadísticas
      const total = data?.length || 0
      const published = data?.filter((p: Post) => p.status === 'published').length || 0
      const drafts = data?.filter((p: Post) => p.status === 'draft').length || 0
      const scheduled = data?.filter((p: Post) => p.status === 'scheduled').length || 0
      const total_views = data?.reduce((sum: number, p: Post) => sum + (p.views || 0), 0) || 0
      
      setStats({ total, published, drafts, scheduled, total_views })
    } catch (err: any) {
      setError(err.message || 'Error al cargar los posts')
    } finally {
      setLoading(false)
    }
  }

  const handleDelete = async (id: number) => {
    if (!confirm('¿Estás seguro de que quieres eliminar este post?')) {
      return
    }

    try {
      const response = await fetch(`/api/posts/${id}`, {
        method: 'DELETE',
      })

      if (!response.ok) {
        throw new Error('Error al eliminar el post')
      }

      await loadPosts()
    } catch (err: any) {
      setError(err.message || 'Error al eliminar el post')
    }
  }

  const handleEdit = (post: Post) => {
    setEditingPost(post)
    setEditTitle(post.title || "")
    setEditExcerpt(post.excerpt || "")
    setEditContent(post.content || "")
    setEditFeaturedImage(post.featured_image || "")
    setIsEditModalOpen(true)
  }

  const handleSaveEdit = async () => {
    if (!editingPost) return

    setIsSaving(true)
    try {
      // Extraer el contenido HTML del editor WYSIWYG
      let contentToSave = ""
      
      if (contentRef.current) {
        contentToSave = contentRef.current.innerHTML
      }

      const response = await fetch(`/api/posts/${editingPost.id}`, {
        method: 'PUT',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: editTitle,
          excerpt: editExcerpt,
          content: contentToSave,
          featured_image: editFeaturedImage,
        }),
      })

      if (!response.ok) {
        throw new Error('Error al actualizar el post')
      }

      await loadPosts()
      setSaveMessage("Post actualizado correctamente")
      setTimeout(() => setSaveMessage(""), 3000)
      
      setIsEditModalOpen(false)
      setEditingPost(null)
      setEditTitle("")
      setEditExcerpt("")
      setEditContent("")
    } catch (err: any) {
      setError(err.message || 'Error al actualizar el post')
    } finally {
      setIsSaving(false)
    }
  }

  const handleCloseModal = () => {
    setIsEditModalOpen(false)
    setEditingPost(null)
    setEditTitle("")
    setEditExcerpt("")
    setEditContent("")
    setEditFeaturedImage("")
  }

  // Funciones para crear nuevo post
  const handleCreateNewPost = () => {
    setIsCreateModalOpen(true)
    setNewTitle("")
    setNewExcerpt("")
    setNewContent("")
    setNewFeaturedImage("")
    setCreateMessage("")
  }

  const handleSaveNewPost = async () => {
    if (!newTitle.trim()) {
      setCreateMessage("El título es obligatorio")
      return
    }

    setIsCreating(true)
    try {
      // Extraer el contenido HTML del editor WYSIWYG
      let contentToSave = ""
      
      if (newContentRef.current) {
        contentToSave = newContentRef.current.innerHTML
      }

      // Generar slug automáticamente
      const slug = newTitle
        .toLowerCase()
        .replace(/[^a-z0-9]+/g, '-')
        .replace(/(^-|-$)/g, '')

      const response = await fetch('/api/posts', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: newTitle,
          slug: slug,
          excerpt: newExcerpt,
          content: contentToSave,
          featured_image: newFeaturedImage,
          published: true,
          status: 'published',
          author: 'Mario Verdú',
        }),
      })

      if (!response.ok) {
        throw new Error('Error al crear el post')
      }

      await loadPosts()
      setCreateMessage("Post creado correctamente")
      setTimeout(() => setCreateMessage(""), 3000)
      
      setIsCreateModalOpen(false)
      setNewTitle("")
      setNewExcerpt("")
      setNewContent("")
      setNewFeaturedImage("")
    } catch (err: any) {
      setCreateMessage(err.message || 'Error al crear el post')
    } finally {
      setIsCreating(false)
    }
  }

  const handleCloseCreateModal = () => {
    setIsCreateModalOpen(false)
    setNewTitle("")
    setNewExcerpt("")
    setNewContent("")
    setNewFeaturedImage("")
    setCreateMessage("")
  }

  // Funciones para el editor WYSIWYG
  
  // 🎯 SISTEMA DE AUTO-CONVERSIÓN COMPLETA: MARKDOWN + TSV → TABLA VISUAL
  // Detecta automáticamente cuando se pega una tabla en Markdown o TSV y la convierte
  
  // Función para detectar si el contenido pegado es una tabla Markdown
  const detectMarkdownTable = (text: string): boolean => {
    const lines = text.trim().split('\n')
    if (lines.length < 2) return false
    
    // Verificar si tiene el patrón de tabla Markdown: | col1 | col2 | col3 |
    const hasTableStructure = lines.some(line => 
      line.trim().startsWith('|') && line.trim().endsWith('|')
    )
    
    // Verificar si tiene separadores: | --- | --- | --- |
    const hasSeparators = lines.some(line => 
      line.trim().match(/^\|[\s\-:]+\|[\s\-:]+\|[\s\-:]+\|$/)
    )
    
    return hasTableStructure && hasSeparators
  }
  
  // 🆕 Función para detectar si el contenido pegado es una tabla TSV (Notion)
  const detectTSVTable = (text: string): boolean => {
    const lines = text.trim().split('\n')
    if (lines.length < 2) return false
    
    // Verificar si tiene el patrón TSV: col1\tcol2\tcol3
    const hasTSVStructure = lines.some(line => 
      line.includes('\t') && line.split('\t').length >= 2
    )
    
    // Verificar que todas las líneas tengan el mismo número de columnas
    if (hasTSVStructure) {
      const columnCounts = lines.map(line => line.split('\t').length)
      const firstColumnCount = columnCounts[0]
      return columnCounts.every(count => count === firstColumnCount)
    }
    
    return false
  }
  
  // 🎯 Función unificada para detectar cualquier tipo de tabla
  const detectTableFormat = (text: string): 'markdown' | 'tsv' | null => {
    if (detectMarkdownTable(text)) return 'markdown'
    if (detectTSVTable(text)) return 'tsv'
    return null
  }
  

  

  

  


  const insertAsciiArt = () => {
    const targetRef = isCreateModalOpen ? newContentRef : contentRef
    if (targetRef.current) {
      const asciiId = `ascii_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const asciiHtml = `
        <div class="ascii-art-container my-4" data-ascii-id="${asciiId}">
          <div class="table-controls mb-2">
            <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeAscii('${asciiId}')">Eliminar</button>
          </div>
          <pre class="font-mono text-sm my-4 p-4 bg-black text-green-400 rounded-md leading-tight whitespace-pre overflow-x-auto" contenteditable="true" style="font-size: 12px;">
    ╔══════════════════════════════════════╗
    ║           ASCII ART                  ║
    ║                                      ║
    ║     ¡Edita este contenido!           ║
    ║                                      ║
    ╚══════════════════════════════════════╝
          </pre>
        </div>
      `
      
      const div = document.createElement('div')
      div.innerHTML = asciiHtml
      targetRef.current.appendChild(div.firstElementChild!)
    }
  }

  const insertQuote = () => {
    const targetRef = isCreateModalOpen ? newContentRef : contentRef
    if (targetRef.current) {
      const quoteId = `quote_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const quoteHtml = `
        <div class="quote-container my-4" data-quote-id="${quoteId}">
          <div class="table-controls mb-2">
            <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeQuote('${quoteId}')">Eliminar</button>
          </div>
          <blockquote class="border-l-4 border-gray-300 pl-4 my-4 italic text-gray-700" contenteditable="true">
            Esta es una cita. ¡Edita este contenido!
          </blockquote>
        </div>
      `
      
      const div = document.createElement('div')
      div.innerHTML = quoteHtml
      targetRef.current.appendChild(div.firstElementChild!)
    }
  }

  const insertSeparator = () => {
    const targetRef = isCreateModalOpen ? newContentRef : contentRef
    if (targetRef.current) {
      const separatorId = `separator_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`
      const separatorHtml = `
        <div class="separator-container my-4" data-separator-id="${separatorId}">
          <div class="table-controls mb-2">
            <button class="text-xs bg-red-500 text-white px-2 py-1 rounded hover:bg-red-600" onclick="removeSeparator('${separatorId}')">Eliminar</button>
          </div>
          <hr class="my-8 border-gray-300" />
          <div class="text-center text-gray-500 italic" contenteditable="true">
            Separador - Edita este texto
          </div>
        </div>
      `
      
      const div = document.createElement('div')
      div.innerHTML = separatorHtml
      targetRef.current.appendChild(div.firstElementChild!)
    }
  }

  // Funciones de formato de texto
  const formatText = (command: string) => {
    // Determinar qué editor está activo
    const activeEditor = isCreateModalOpen ? newContentRef.current : contentRef.current
    if (activeEditor) {
      // Asegurar que el editor activo tenga el foco
      activeEditor.focus()
      document.execCommand(command, false)
    }
  }

  // Funciones globales para manejar elementos especiales
  useEffect(() => {
















    // Función para eliminar ASCII art
    ;(window as any).removeAscii = (asciiId: string) => {
      const asciiContainer = document.querySelector(`[data-ascii-id="${asciiId}"]`)
      if (asciiContainer) {
        asciiContainer.remove()
      }
    }

    // Función para eliminar cita
    ;(window as any).removeQuote = (quoteId: string) => {
      const quoteContainer = document.querySelector(`[data-quote-id="${quoteId}"]`)
      if (quoteContainer) {
        quoteContainer.remove()
      }
    }

    // Función para eliminar separador
    ;(window as any).removeSeparator = (separatorId: string) => {
      const separatorContainer = document.querySelector(`[data-separator-id="${separatorId}"]`)
      if (separatorContainer) {
        separatorContainer.remove()
      }
    }

    // 🎯 FUNCIONES AVANZADAS DE TABLAS (Selección de texto y Drag & Drop)

    // Función para manejar selección de texto en tablas (previene selección de whitespace)


    // 🎯 FUNCIONES DE DRAG & DROP PARA COLUMNAS
    // Permite al usuario arrastrar y soltar columnas para reordenarlas
    
    // Función para iniciar el arrastre de una columna

    
    // Función para permitir soltar en otras columnas

    
    // Función para manejar el soltado de una columna

    
    // Función para reordenar las columnas de una tabla
    const reorderTableColumns = (tableId: string, sourceIndex: number, targetIndex: number) => {
      const tableContainer = document.querySelector(`[data-table-id="${tableId}"]`)
      if (!tableContainer) return
      
      const table = tableContainer.querySelector('table')
      if (!table) return
      
      const thead = table.querySelector('thead tr')
      const tbody = table.querySelector('tbody')
      
      if (!thead || !tbody) return
      
      // Obtener todas las filas del tbody
      const tbodyRows = Array.from(tbody.querySelectorAll('tr'))
      
      // Reordenar encabezados
      const headerCells = Array.from(thead.querySelectorAll('th'))
      if (sourceIndex < headerCells.length && targetIndex < headerCells.length) {
        const sourceHeader = headerCells[sourceIndex]
        const targetHeader = headerCells[targetIndex]
        
        // Actualizar índices en los eventos de drag & drop
        sourceHeader.setAttribute('ondragstart', `handleColumnDragStart(event, '${tableId}', ${targetIndex})`)
        sourceHeader.setAttribute('ondrop', `handleColumnDrop(event, '${tableId}', ${targetIndex})`)
        
        targetHeader.setAttribute('ondragstart', `handleColumnDragStart(event, '${tableId}', ${sourceIndex})`)
        targetHeader.setAttribute('ondrop', `handleColumnDrop(event, '${tableId}', ${sourceIndex})`)
        
        // Mover el encabezado
        if (sourceIndex < targetIndex) {
          thead.insertBefore(sourceHeader, targetHeader.nextSibling)
        } else {
          thead.insertBefore(sourceHeader, targetHeader)
        }
      }
      
      // Reordenar celdas del cuerpo
      tbodyRows.forEach(row => {
        const cells = Array.from(row.querySelectorAll('td'))
        if (sourceIndex < cells.length && targetIndex < cells.length) {
          const sourceCell = cells[sourceIndex]
          const targetCell = cells[targetIndex]
          
          // Mover la celda
          if (sourceIndex < targetIndex) {
            row.insertBefore(sourceCell, targetCell.nextSibling)
          } else {
            row.insertBefore(sourceCell, targetCell)
          }
        }
      })
      
      // Restaurar estilos visuales
      const allHeaders = table.querySelectorAll('th')
      allHeaders.forEach(header => {
        const th = header as HTMLElement
        th.style.opacity = ''
        th.style.transform = ''
      })
      
      console.log(`✅ Columna ${sourceIndex} movida a posición ${targetIndex} en tabla ${tableId}`)
    }
  }, [])

  const getStatusColor = (status: string) => {
    switch (status) {
      case "published":
        return "bg-green-100 text-green-800"
      case "draft":
        return "bg-gray-100 text-gray-800"
      case "scheduled":
        return "bg-blue-100 text-blue-800"
      default:
        return "bg-gray-100 text-gray-800"
    }
  }

  const getStatusText = (status: string) => {
    switch (status) {
      case "published":
        return "Publicado"
      case "draft":
        return "Borrador"
      case "scheduled":
        return "Programado"
      default:
        return status
    }
  }

  if (loading) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">📝 Gestión de Posts</h1>
            <p className="text-gray-600 mt-2">Administra el contenido del blog y las publicaciones</p>
          </div>
        </div>
        <div className="text-center py-8">
          <p className="text-gray-500">Cargando posts...</p>
        </div>
      </div>
    )
  }

  if (error) {
    return (
      <div className="space-y-6">
        <div className="flex items-center justify-between">
          <div>
            <h1 className="text-3xl font-bold text-gray-900">📝 Gestión de Posts</h1>
            <p className="text-gray-600 mt-2">Administra el contenido del blog y las publicaciones</p>
          </div>
        </div>
        <div className="text-center py-8">
          <p className="text-red-500">Error: {error}</p>
        </div>
      </div>
    )
  }

  return (
    <div className="space-y-6">
      <div className="flex items-center justify-between">
        <div>
          <h1 className="text-3xl font-bold text-gray-900">📝 Gestión de Posts</h1>
          <p className="text-gray-600 mt-2">Administra el contenido del blog y las publicaciones</p>
        </div>
        <Button className="bg-blue-600 hover:bg-blue-700" onClick={handleCreateNewPost}>
          <Plus className="w-4 h-4 mr-2" />
          Nuevo Post
        </Button>
      </div>

      {/* Mensaje de éxito */}
      {saveMessage && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
          {saveMessage}
        </div>
      )}

      {/* Mensaje de éxito para creación */}
      {createMessage && (
        <div className="bg-green-100 border border-green-400 text-green-700 px-4 py-3 rounded">
          {createMessage}
        </div>
      )}

      {/* Estadísticas */}
      <div className="grid grid-cols-1 md:grid-cols-5 gap-4">
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-blue-600">{stats.total}</div>
            <div className="text-sm text-gray-600">Total Posts</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-green-600">{stats.published}</div>
            <div className="text-sm text-gray-600">Publicados</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-gray-600">{stats.drafts}</div>
            <div className="text-sm text-gray-600">Borradores</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-blue-600">{stats.scheduled}</div>
            <div className="text-sm text-gray-600">Programados</div>
          </CardContent>
        </Card>
        <Card>
          <CardContent className="p-4">
            <div className="text-2xl font-bold text-purple-600">{stats.total_views}</div>
            <div className="text-sm text-gray-600">Total Vistas</div>
          </CardContent>
        </Card>
      </div>

      {/* Lista de Posts */}
      <Card>
        <CardHeader>
          <CardTitle>Posts ({posts.length})</CardTitle>
          <CardDescription>Lista de todos los posts del blog</CardDescription>
        </CardHeader>
        <CardContent>
          {posts.length === 0 ? (
            <div className="text-center py-8">
              <p className="text-gray-500">No hay posts disponibles</p>
            </div>
          ) : (
            <div className="space-y-4">
              {posts.map((post) => (
                <div key={post.id} className="border rounded-lg p-4 hover:bg-gray-50">
                  <div className="flex items-center justify-between">
                    <div className="flex-1">
                      <h3 className="font-semibold text-lg">{post.title}</h3>
                      <p className="text-gray-600 text-sm mt-1">{post.excerpt}</p>
                      <div className="flex items-center gap-4 mt-2 text-sm text-gray-500">
                        <span className="flex items-center gap-1">
                          <User className="w-4 h-4" />
                          {post.author}
                        </span>
                        <span className="flex items-center gap-1">
                          <Calendar className="w-4 h-4" />
                          {new Date(post.created_at).toLocaleDateString()}
                        </span>
                        <span className="flex items-center gap-1">
                          <Eye className="w-4 h-4" />
                          {post.views} vistas
                        </span>
                      </div>
                    </div>
                    <div className="flex items-center gap-2">
                      <Badge className={getStatusColor(post.status)}>
                        {getStatusText(post.status)}
                      </Badge>
                      <Button variant="outline" size="sm" onClick={() => handleEdit(post)}>
                        <Edit className="w-4 h-4" />
                      </Button>
                      <Button variant="outline" size="sm" onClick={() => handleDelete(post.id)}>
                        <Trash2 className="w-4 h-4" />
                      </Button>
                    </div>
                  </div>
                </div>
              ))}
            </div>
          )}
        </CardContent>
      </Card>

      {/* Modal de Edición */}
      {isEditModalOpen && editingPost && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-6xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Editar Post</h2>
              <Button variant="outline" size="sm" onClick={handleCloseModal}>
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Título
                </label>
                <input
                  type="text"
                  value={editTitle}
                  onChange={(e) => setEditTitle(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Extracto
                </label>
                <textarea
                  value={editExcerpt}
                  onChange={(e) => setEditExcerpt(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Imagen Destacada (URL)
                </label>
                <input
                  type="url"
                  value={editFeaturedImage}
                  onChange={(e) => setEditFeaturedImage(e.target.value)}
                  placeholder="https://ejemplo.com/imagen.jpg"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <p className="text-sm text-gray-500 mt-1">
                  URL de la imagen que se mostrará como thumbnail del post
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contenido
                </label>
                
                {/* Barra de herramientas de formato */}
                <div className="flex items-center gap-2 mb-2 p-2 bg-gray-50 rounded-md border">
                  <span className="text-sm text-gray-600 mr-2">Formato:</span>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('bold')}
                    className="flex items-center gap-1"
                  >
                    <Bold className="w-4 h-4" />
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('italic')}
                    className="flex items-center gap-1"
                  >
                    <Italic className="w-4 h-4" />
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('underline')}
                    className="flex items-center gap-1"
                  >
                    <Underline className="w-4 h-4" />
                  </Button>
                  
                  <div className="ml-4 border-l border-gray-300 pl-4">
                    <span className="text-sm text-gray-600 mr-2">Insertar:</span>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertTable}
                      className="flex items-center gap-1"
                    >
                      <Table className="w-4 h-4" />
                      Tabla
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertAsciiArt}
                      className="flex items-center gap-1"
                    >
                      <Code className="w-4 h-4" />
                      ASCII Art
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertQuote}
                      className="flex items-center gap-1"
                    >
                      <Type className="w-4 h-4" />
                      Cita
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertSeparator}
                      className="flex items-center gap-1"
                    >
                      <Minus className="w-4 h-4" />
                      Separador
                    </Button>
                  </div>
                </div>
                
                {/* Editor WYSIWYG real */}
                                  <div
                    ref={contentRef}
                    contentEditable
                    className="w-full min-h-[500px] px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900 overflow-y-auto prose max-w-none"
                    style={{ 
                      whiteSpace: 'pre-wrap',
                      wordWrap: 'break-word',
                      lineHeight: '1.6'
                    }}
                    dangerouslySetInnerHTML={{ __html: editContent }}

                  />
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <Button variant="outline" onClick={handleCloseModal}>
                Cancelar
              </Button>
              <Button 
                onClick={handleSaveEdit} 
                disabled={isSaving}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isSaving ? 'Guardando...' : 'Guardar Cambios'}
              </Button>
            </div>
          </div>
        </div>
      )}

      {/* Modal de Creación de Nuevo Post */}
      {isCreateModalOpen && (
        <div className="fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50">
          <div className="bg-white rounded-lg p-6 w-full max-w-6xl max-h-[90vh] overflow-y-auto">
            <div className="flex items-center justify-between mb-4">
              <h2 className="text-xl font-semibold">Crear Nuevo Post</h2>
              <Button variant="outline" size="sm" onClick={handleCloseCreateModal}>
                <X className="w-4 h-4" />
              </Button>
            </div>
            
            <div className="space-y-4">
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Título *
                </label>
                <input
                  type="text"
                  value={newTitle}
                  onChange={(e) => setNewTitle(e.target.value)}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Título del post"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Extracto
                </label>
                <textarea
                  value={newExcerpt}
                  onChange={(e) => setNewExcerpt(e.target.value)}
                  rows={3}
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                  placeholder="Breve descripción del post"
                />
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Imagen Destacada (URL)
                </label>
                <input
                  type="url"
                  value={newFeaturedImage}
                  onChange={(e) => setNewFeaturedImage(e.target.value)}
                  placeholder="https://ejemplo.com/imagen.jpg"
                  className="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                />
                <p className="text-sm text-gray-500 mt-1">
                  URL de la imagen que se mostrará como thumbnail del post
                </p>
              </div>
              
              <div>
                <label className="block text-sm font-medium text-gray-700 mb-2">
                  Contenido
                </label>
                
                {/* Barra de herramientas de formato */}
                <div className="flex items-center gap-2 mb-2 p-2 bg-gray-50 rounded-md border">
                  <span className="text-sm text-gray-600 mr-2">Formato:</span>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('bold')}
                    className="flex items-center gap-1"
                  >
                    <Bold className="w-4 h-4" />
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('italic')}
                    className="flex items-center gap-1"
                  >
                    <Italic className="w-4 h-4" />
                  </Button>
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => formatText('underline')}
                    className="flex items-center gap-1"
                  >
                    <Underline className="w-4 h-4" />
                  </Button>
                  
                  <div className="ml-4 border-l border-gray-300 pl-4">
                    <span className="text-sm text-gray-600 mr-2">Insertar:</span>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertTable}
                      className="flex items-center gap-1"
                    >
                      <Table className="w-4 h-4" />
                      Tabla
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertAsciiArt}
                      className="flex items-center gap-1"
                    >
                      <Code className="w-4 h-4" />
                      ASCII Art
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertQuote}
                      className="flex items-center gap-1"
                    >
                      <Type className="w-4 h-4" />
                      Cita
                    </Button>
                    <Button
                      type="button"
                      variant="outline"
                      size="sm"
                      onClick={insertSeparator}
                      className="flex items-center gap-1"
                    >
                      <Minus className="w-4 h-4" />
                      Separador
                    </Button>
                  </div>
                </div>
                
                {/* Editor WYSIWYG real */}
                                  <div
                    ref={newContentRef}
                    contentEditable
                    className="w-full min-h-[500px] px-4 py-3 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 bg-white text-gray-900 overflow-y-auto prose max-w-none"
                    style={{ 
                      whiteSpace: 'pre-wrap',
                      wordWrap: 'break-word',
                      lineHeight: '1.6'
                    }}

                  />
              </div>
            </div>
            
            <div className="flex justify-end gap-2 mt-6">
              <Button variant="outline" onClick={handleCloseCreateModal}>
                Cancelar
              </Button>
              <Button 
                onClick={handleSaveNewPost} 
                disabled={isCreating}
                className="bg-blue-600 hover:bg-blue-700"
              >
                {isCreating ? 'Creando...' : 'Crear Post'}
              </Button>
            </div>
          </div>
        </div>
      )}
    </div>
  )
} 