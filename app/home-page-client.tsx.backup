"use client"

import { useState, useEffect, useRef } from "react"
import { Header } from "@/components/ui/header"
import { ContactForm } from "@/components/contact-form"
import Link from "next/link"
import { MasterStackedImages } from "@/components/master-stacked-images"
import { VideoCover } from "@/components/video-cover"
import ContactSection from "@/components/contact-section"
import ChatTuentiMaster from "@/components/chat-tuenti/chat-tuenti-master"
import ChatTuentiButtonMaster from "@/components/chat-tuenti/chat-tueni-button-master"
import { useRouter } from "next/navigation"
import { AnalyticsTracker } from "@/components/analytics-tracker"

export default function HomePageClient() {
  // TODOS los hooks deben ir aqu√≠ arriba
  const router = useRouter()
  const [isTransitioning, setIsTransitioning] = useState(false)
  const [hasAnimated, setHasAnimated] = useState(false)
  const [isContactFormOpen, setIsContactFormOpen] = useState(false)
  const [isSecondContactFormOpen, setIsSecondContactFormOpen] = useState(false)
  const [isAvatarInHeader, setIsAvatarInHeader] = useState(false)
  const [avatarLeftPosition, setAvatarLeftPosition] = useState({
    mobile: 16,
    desktop: 60,
    xs: 16,
    sm: 16,
    md: 24,
    lg: 60,
    xl: 60,
    xxl: 60,
  })
  const [randomText, setRandomText] = useState("Construyamos tu negocio")
  const pageRef = useRef<HTMLDivElement>(null)
  const avatarRef = useRef<HTMLDivElement>(null)
  const isMobileRef = useRef(false)
  // Chat state
  const [isChatOpen, setIsChatOpen] = useState(false)
  const [maintenance, setMaintenance] = useState(false)
  const [checkingVisibility, setCheckingVisibility] = useState(true)

  const isProduction = process.env.NEXT_PUBLIC_VERCEL_ENV === "production" || process.env.NODE_ENV === "production"

  const toggleChat = () => {
    setIsChatOpen(!isChatOpen)
  }

  useEffect(() => {
    if (!hasAnimated) {
      const timer = setTimeout(() => {
        setIsTransitioning(true)
        setHasAnimated(true)
      }, 5000)

      return () => clearTimeout(timer)
    }
  }, [hasAnimated])

  useEffect(() => {
    // L√≥gica de visibilidad de rutas para la ra√≠z
    const checkVisibility = async () => {
      setCheckingVisibility(true)
      console.log(`üîÑ [${isProduction ? "PROD" : "DEV"}] HomePage: Checking route visibility...`)

      let visibility: { [key: string]: boolean } = {}

      // En development, primero intentar localStorage
      if (!isProduction && typeof window !== "undefined") {
        const localVisibilityRaw = localStorage.getItem("routesVisibility")
        if (localVisibilityRaw) {
          try {
            visibility = JSON.parse(localVisibilityRaw)
            console.log(`üì± [DEV] HomePage: Using localStorage visibility:`, visibility)
          } catch (error) {
            console.warn(`‚ö†Ô∏è [DEV] HomePage: localStorage parse error:`, error)
            visibility = {}
          }
        }
      }

      // Si no hay localStorage o estamos en production, consultar la API
      if (Object.keys(visibility).length === 0) {
        try {
          console.log(`üåê [${isProduction ? "PROD" : "DEV"}] HomePage: Fetching from API...`)
          const res = await fetch("/api/admin/routes")
          const data = await res.json()
          if (data && data.data && data.data.routes) {
            data.data.routes.forEach((route: any) => {
              visibility[route.path] = route.isVisible
            })
            console.log(`‚úÖ [${isProduction ? "PROD" : "DEV"}] HomePage: API visibility loaded:`, visibility)
          }
        } catch (error) {
          console.error(`‚ùå [${isProduction ? "PROD" : "DEV"}] HomePage: API error:`, error)
          // Si falla la API, asume todo visible
          visibility = { "/": true, "/work-experience": true, "/posts": true }
        }
      }

      // L√≥gica de redirecci√≥n y mantenimiento
      const priorities = ["/", "/work-experience", "/posts"]
      const current = "/"
      if (!visibility[current]) {
        // Buscar la siguiente ruta prioritaria activa
        const next = priorities.find((r) => r !== current && visibility[r])
        if (next) {
          console.log(`üîÑ [${isProduction ? "PROD" : "DEV"}] HomePage: Redirecting to ${next}`)
          router.replace(next)
        } else {
          console.log(`üö´ [${isProduction ? "PROD" : "DEV"}] HomePage: No active routes, showing maintenance`)
          setMaintenance(true)
        }
      }
      setCheckingVisibility(false)
    }
    checkVisibility()
  }, [router, isProduction])

  useEffect(() => {
    const calculateAvatarPosition = () => {
      if (!avatarRef.current) return

      const rect = avatarRef.current.getBoundingClientRect()
      const isMobile = window.innerWidth < 768

      if (isMobile) {
        setAvatarLeftPosition((prev) => ({
          ...prev,
          mobile: rect.left,
        }))
      } else {
        setAvatarLeftPosition((prev) => ({
          ...prev,
          desktop: rect.left,
        }))
      }
    }

    const checkIfMobile = () => {
      isMobileRef.current = window.innerWidth < 768
    }

    const handleScroll = () => {
      const scrollThreshold = 150
      setIsAvatarInHeader(window.scrollY > scrollThreshold)
    }

    // Inicializar
    checkIfMobile()
    calculateAvatarPosition()

    // Event listeners
    window.addEventListener("resize", () => {
      checkIfMobile()
      calculateAvatarPosition()
    })
    window.addEventListener("scroll", handleScroll)

    // Cleanup
    return () => {
      window.removeEventListener("resize", () => {
        checkIfMobile()
        calculateAvatarPosition()
      })
      window.removeEventListener("scroll", handleScroll)
    }
  }, [])

  const getBreakpointPadding = () => {
    if (typeof window === "undefined") return 16

    const width = window.innerWidth
    if (width < 640) return 16 // xs
    if (width < 768) return 16 // sm
    if (width < 1024) return 24 // md
    if (width < 1280) return 60 // lg
    if (width < 1536) return 60 // xl
    return 60 // xxl
  }

  // El spinner debe ser lo primero que se retorna
  if (typeof window !== "undefined" && checkingVisibility) {
    return (
      <div className="fixed inset-0 z-50 flex items-center justify-center bg-white">
        <div className="inline-block animate-spin rounded-full h-16 w-16 border-b-2 border-gray-800" style={{ width: 64, height: 64 }} />
      </div>
    )
  }

  if (maintenance) {
    return (
      <div className="min-h-screen flex flex-col items-center justify-center bg-gray-100">
        <h1 className="text-3xl font-bold mb-4">Sitio en mantenimiento</h1>
        <p className="text-lg text-gray-600">Estamos realizando tareas de mantenimiento. Por favor, vuelve m√°s tarde.</p>
      </div>
    )
  }

  return (
    <>
      <AnalyticsTracker 
        trackPerformance={true}
        trackScroll={true}
        customEvents={[
          {
            selector: 'a[data-track="linkedin"]',
            event: 'click',
            category: 'social',
            label: 'linkedin_click'
          },
          {
            selector: 'a[data-track="download"]',
            event: 'click',
            category: 'engagement',
            label: 'cv_download'
          },
          {
            selector: 'button[data-track="contact"]',
            event: 'click',
            category: 'conversion',
            label: 'contact_button_click'
          }
        ]}
      />
      <Header isAvatarInHeader={isAvatarInHeader} />
      <div ref={pageRef} className="min-h-screen">
        {/* Hero Section */}
        <section className="relative min-h-screen flex items-center justify-center overflow-hidden">
          <div className="absolute inset-0 z-0">
            <VideoCover />
          </div>
          
          <div className="relative z-10 text-center px-4 sm:px-6 lg:px-8">
            <div className="max-w-4xl mx-auto">
              <h1 className="text-4xl sm:text-5xl lg:text-6xl font-bold text-white mb-6 leading-tight">
                Mario Verd√∫
              </h1>
              <p className="text-xl sm:text-2xl lg:text-3xl text-white/90 mb-8">
                {randomText}
              </p>
              <div className="flex flex-col sm:flex-row gap-4 justify-center">
                <button
                  onClick={() => setIsContactFormOpen(true)}
                  className="bg-white text-gray-900 px-8 py-3 rounded-lg font-semibold hover:bg-gray-100 transition-colors"
                >
                  Contactar
                </button>
                <Link
                  href="/work-experience"
                  className="border-2 border-white text-white px-8 py-3 rounded-lg font-semibold hover:bg-white hover:text-gray-900 transition-colors"
                >
                  Ver Portfolio
                </Link>
              </div>
            </div>
          </div>

          {/* Avatar floating */}
          <div
            ref={avatarRef}
            className="absolute bottom-8 left-4 sm:left-8 lg:left-16 z-20"
            style={{
              left: `${getBreakpointPadding()}px`,
            }}
          >
            <img
              src="https://assets.marioverdu.com/avatar/avatar-2.webp"
              alt="Mario Verd√∫"
              className="w-16 h-16 sm:w-20 sm:h-20 rounded-full border-4 border-white shadow-lg"
            />
          </div>
        </section>

        {/* About Section */}
        <section className="py-16 sm:py-24 bg-white">
          <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="grid grid-cols-1 lg:grid-cols-2 gap-12 items-center">
              <div>
                <h2 className="text-3xl sm:text-4xl font-bold text-gray-900 mb-6">
                  UX/UI Designer
                </h2>
                <p className="text-lg text-gray-600 mb-8">
                  Desde 2017 dise√±o, valido, itero y prototipo productos digitales limpios, vibrantes y funcionales
                  alineados con el negocio.
                </p>
                <div className="flex flex-col sm:flex-row gap-4">
                  <Link
                    href="/work-experience"
                    className="bg-gray-900 text-white px-6 py-3 rounded-lg font-semibold hover:bg-gray-800 transition-colors text-center"
                  >
                    Ver Experiencia
                  </Link>
                  <a
                    href="https://linkedin.com/in/marioverdu"
                    target="_blank"
                    rel="noopener noreferrer"
                    className="border-2 border-gray-900 text-gray-900 px-6 py-3 rounded-lg font-semibold hover:bg-gray-900 hover:text-white transition-colors text-center"
                  >
                    LinkedIn
                  </a>
                </div>
              </div>
              <div className="relative">
                <MasterStackedImages />
              </div>
            </div>
          </div>
        </section>

        {/* Contact Section */}
        <ContactSection />

        {/* Footer */}
        <footer className="bg-gray-900 text-white py-12">
          <div className="max-w-6xl mx-auto px-4 sm:px-6 lg:px-8">
            <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
              <div>
                <h3 className="text-xl font-semibold mb-4">Mario Verd√∫</h3>
                <p className="text-gray-400">
                  UX/UI Designer especializado en crear experiencias digitales excepcionales.
                </p>
              </div>
              <div>
                <h3 className="text-xl font-semibold mb-4">Enlaces</h3>
                <ul className="space-y-2">
                  <li>
                    <Link href="/work-experience" className="text-gray-400 hover:text-white transition-colors">
                      Experiencia
                    </Link>
                  </li>
                  <li>
                    <Link href="/posts" className="text-gray-400 hover:text-white transition-colors">
                      Blog
                    </Link>
                  </li>
                </ul>
              </div>
              <div>
                <h3 className="text-xl font-semibold mb-4">Contacto</h3>
                <ul className="space-y-2">
                  <li>
                    <a
                      href="https://linkedin.com/in/marioverdu"
                      target="_blank"
                      rel="noopener noreferrer"
                      className="text-gray-400 hover:text-white transition-colors"
                    >
                      LinkedIn
                    </a>
                  </li>
                  <li>
                    <a
                      href="mailto:marioverdugambin@gmail.com"
                      className="text-gray-400 hover:text-white transition-colors"
                    >
                      Email
                    </a>
                  </li>
                </ul>
              </div>
            </div>
            <div className="border-t border-gray-800 mt-8 pt-8 text-center text-gray-400">
              <p>&copy; 2024 Mario Verd√∫. Todos los derechos reservados.</p>
            </div>
          </div>
        </footer>
      </div>

      {/* Contact Forms */}
      {isContactFormOpen && (
        <ContactForm
          isOpen={isContactFormOpen}
          onClose={() => setIsContactFormOpen(false)}
        />
      )}

      {isSecondContactFormOpen && (
        <ContactForm
          isOpen={isSecondContactFormOpen}
          onClose={() => setIsSecondContactFormOpen(false)}
        />
      )}

      {/* Chat */}
      <div style={{ width: '100%', height: 36, display: 'flex', alignItems: 'center', justifyContent: 'center', marginTop: 32 }}>
        <ChatTuentiButtonMaster isOpen={isChatOpen} onClick={toggleChat} />
      </div>
      <ChatTuentiMaster isOpen={isChatOpen} toggleChat={toggleChat} botName="Mario Verd√∫" isMobile={isMobileRef.current} />
    </>
  )
}
