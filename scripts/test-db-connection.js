import { config } from 'dotenv'
import { neon } from '@neondatabase/serverless'
import { fileURLToPath } from 'url'
import { dirname, join } from 'path'

const __filename = fileURLToPath(import.meta.url)
const __dirname = dirname(__filename)

config({ path: join(__dirname, '..', '.env.local') })

async function testDatabaseConnection() {
  try {
    console.log('üîç Verificando conexi√≥n a la base de datos...')
    
    // Verificar variables de entorno
    console.log('\nüìã Variables de entorno de base de datos:')
    console.log('DATABASE_URL:', process.env.DATABASE_URL ? '‚úÖ Configurado' : '‚ùå No configurado')
    console.log('POSTGRES_URL:', process.env.POSTGRES_URL ? '‚úÖ Configurado' : '‚ùå No configurado')
    console.log('POSTGRES_PRISMA_URL:', process.env.POSTGRES_PRISMA_URL ? '‚úÖ Configurado' : '‚ùå No configurado')
    
    if (!process.env.DATABASE_URL) {
      console.error('\n‚ùå DATABASE_URL no est√° configurado')
      console.log('\nüìù Soluciones:')
      console.log('1. Verifica que el archivo .env.local existe en la ra√≠z del proyecto')
      console.log('2. Aseg√∫rate de que DATABASE_URL est√© definido en .env.local')
      console.log('3. Reinicia el servidor despu√©s de modificar .env.local')
      return
    }
    
    // Intentar conectar a la base de datos
    const sql = neon(process.env.DATABASE_URL)
    
    console.log('\nüîå Probando conexi√≥n...')
    const result = await sql`SELECT NOW() as current_time, version() as db_version`
    
    console.log('‚úÖ Conexi√≥n exitosa!')
    console.log('‚è∞ Hora actual de la BD:', result[0].current_time)
    console.log('üìä Versi√≥n de PostgreSQL:', result[0].db_version.split(' ')[0])
    
    // Verificar si las tablas de anal√≠ticas existen
    console.log('\nüìä Verificando tablas de anal√≠ticas...')
    try {
      const tables = await sql`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name IN ('page_events', 'user_metrics', 'performance_metrics', 'custom_events')
        ORDER BY table_name
      `
      
      if (tables.length === 0) {
        console.log('‚ö†Ô∏è  Las tablas de anal√≠ticas no existen')
        console.log('üí° Ejecuta el script de configuraci√≥n: node scripts/run-analytics-setup.js')
      } else {
        console.log('‚úÖ Tablas de anal√≠ticas encontradas:')
        tables.forEach(table => console.log(`   - ${table.table_name}`))
        
        // Contar registros en cada tabla
        const pageEventsCount = await sql`SELECT COUNT(*) as count FROM page_events`
        const userMetricsCount = await sql`SELECT COUNT(*) as count FROM user_metrics`
        const performanceCount = await sql`SELECT COUNT(*) as count FROM performance_metrics`
        const customEventsCount = await sql`SELECT COUNT(*) as count FROM custom_events`
        
        console.log('\nüìà Registros en las tablas:')
        console.log(`   - page_events: ${pageEventsCount[0].count} registros`)
        console.log(`   - user_metrics: ${userMetricsCount[0].count} registros`)
        console.log(`   - performance_metrics: ${performanceCount[0].count} registros`)
        console.log(`   - custom_events: ${customEventsCount[0].count} registros`)
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  No se pudieron verificar las tablas de anal√≠ticas:', error.message)
    }
    
    // Verificar si las tablas de propuestas existen
    console.log('\nüìã Verificando tablas de propuestas...')
    try {
      const proposalsTable = await sql`
        SELECT table_name 
        FROM information_schema.tables 
        WHERE table_schema = 'public' 
        AND table_name = 'proposals'
      `
      
      if (proposalsTable.length === 0) {
        console.log('‚ö†Ô∏è  La tabla de propuestas no existe')
        console.log('üí° Necesitas crear la tabla proposals en tu base de datos')
      } else {
        console.log('‚úÖ Tabla de propuestas encontrada')
        
        // Contar propuestas
        const count = await sql`SELECT COUNT(*) as count FROM proposals`
        console.log(`   - Total de propuestas: ${count[0].count}`)
      }
    } catch (error) {
      console.log('‚ö†Ô∏è  No se pudo verificar la tabla de propuestas:', error.message)
    }
    
  } catch (error) {
    console.error('\n‚ùå Error al conectar con la base de datos:')
    console.error(error.message)
    
    if (error.message.includes('connection')) {
      console.log('\nüí° Posibles soluciones:')
      console.log('1. Verifica que la URL de la base de datos sea correcta')
      console.log('2. Aseg√∫rate de que la base de datos est√© activa en Neon')
      console.log('3. Verifica las credenciales de la base de datos')
      console.log('4. Comprueba que el firewall no est√© bloqueando la conexi√≥n')
    }
  }
}

testDatabaseConnection()
