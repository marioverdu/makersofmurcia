#!/usr/bin/env node

/**
 * Script para probar la configuraci√≥n de rutas de producci√≥n
 */

// Importar usando dynamic import para TypeScript
let RouteManagementService;

async function loadRouteManagementService() {
  try {
    const module = await import('../lib/route-management-service.ts');
    RouteManagementService = module.RouteManagementService;
  } catch (error) {
    console.error('Error loading RouteManagementService:', error);
    process.exit(1);
  }
}

async function testProductionRoutes() {
  // Cargar el servicio primero
  await loadRouteManagementService();
  
  console.log('üß™ Probando configuraci√≥n de rutas de producci√≥n...\n');

  // Simular diferentes entornos
  const testPaths = [
    '/',
    '/admin',
    '/admin/routes',
    '/admin/analytics',
    '/work-experience',
    '/posts',
    '/contact',
    '/styleguide',
    '/test',
    '/api/test'
  ];

  console.log('üìã Rutas de prueba:');
  testPaths.forEach(path => console.log(`  - ${path}`));
  console.log();

  // Probar en modo desarrollo
  console.log('üîß Probando en modo DESARROLLO:');
  testPaths.forEach(path => {
    const shouldBeActive = RouteManagementService.shouldRouteBeActiveByDefault(path, false);
    console.log(`  ${shouldBeActive ? '‚úÖ' : '‚ùå'} ${path} -> ${shouldBeActive ? 'ACTIVA' : 'INACTIVA'}`);
  });
  console.log();

  // Probar en modo producci√≥n
  console.log('üöÄ Probando en modo PRODUCCI√ìN:');
  testPaths.forEach(path => {
    const shouldBeActive = RouteManagementService.shouldRouteBeActiveByDefault(path, true);
    console.log(`  ${shouldBeActive ? '‚úÖ' : '‚ùå'} ${path} -> ${shouldBeActive ? 'ACTIVA' : 'INACTIVA'}`);
  });
  console.log();

  // Mostrar rutas activas por defecto
  console.log('üéØ Rutas activas por defecto en producci√≥n:');
  const defaultRoutes = RouteManagementService.getDefaultActiveRoutes();
  defaultRoutes.forEach(route => {
    console.log(`  - ${route}`);
  });
  console.log();

  // Probar detecci√≥n de entorno
  console.log('üåç Detecci√≥n de entorno:');
  const isProd = RouteManagementService.isProduction();
  console.log(`  Entorno actual: ${isProd ? 'PRODUCCI√ìN' : 'DESARROLLO'}`);
  console.log(`  Variables de entorno:`);
  console.log(`    NODE_ENV: ${process.env.NODE_ENV || 'no definido'}`);
  console.log(`    NEXT_PUBLIC_VERCEL_ENV: ${process.env.NEXT_PUBLIC_VERCEL_ENV || 'no definido'}`);
  console.log(`    VERCEL_ENV: ${process.env.VERCEL_ENV || 'no definido'}`);
  console.log();

  // Probar conexi√≥n a base de datos
  console.log('üîå Probando conexi√≥n a base de datos:');
  try {
    const isConnected = await RouteManagementService.testConnection();
    console.log(`  Conexi√≥n: ${isConnected ? '‚úÖ Conectada' : '‚ùå Desconectada'}`);
  } catch (error) {
    console.log(`  Conexi√≥n: ‚ùå Error - ${error.message}`);
  }
  console.log();

  console.log('‚úÖ Pruebas completadas');
}

// Ejecutar si se llama directamente
if (import.meta.url === `file://${process.argv[1]}`) {
  testProductionRoutes()
    .then(() => {
      console.log('\nüéâ Script de prueba completado exitosamente');
      process.exit(0);
    })
    .catch((error) => {
      console.error('\n‚ùå Error en las pruebas:', error);
      process.exit(1);
    });
}

export { testProductionRoutes };
